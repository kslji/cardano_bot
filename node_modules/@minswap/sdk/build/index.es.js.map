{"version":3,"file":"index.es.js","sources":["../src/types/string.ts","../src/types/asset.ts","../src/types/network.ts","../src/types/constants.ts","../src/types/factory.ts","../src/utils/hash.internal.ts","../src/types/address.internal.ts","../src/utils/address-utils.internal.ts","../src/types/pool.internal.ts","../src/types/pool.ts","../src/adapter.ts","../src/types/order.ts","../src/utils/sqrt.internal.ts","../src/calculate.ts","../src/batcher-fee-reduction/types.internal.ts","../src/batcher-fee-reduction/configs.internal.ts","../src/batcher-fee-reduction/calculate.ts","../src/utils/network.internal.ts","../src/dex.ts","../src/dex-v2.ts"],"sourcesContent":["export namespace StringUtils {\n    export function compare(s1: string, s2: string): number {\n        if (s1 < s2) {\n            return -1;\n        }\n        if (s1 === s2) {\n            return 0;\n        }\n        return 1;\n    }\n}","import { Constr, Data } from \"lucid-cardano\";\n\nimport { StringUtils } from \"./string\";\n\nexport const ADA: Asset = {\n    policyId: \"\",\n    tokenName: \"\"\n}\n\nexport type Asset = {\n    policyId: string,\n    tokenName: string\n}\n\nexport namespace Asset {\n    export function fromString(s: string): Asset {\n        if (s === \"lovelace\") {\n            return {\n                policyId: \"\",\n                tokenName: \"\"\n            };\n        }\n        const policyId = s.slice(0, 56);\n        const tokenName = s.slice(56);\n        return {\n            policyId: policyId,\n            tokenName: tokenName\n        }\n    }\n\n    export function toString(asset: Asset): string {\n        const { policyId, tokenName } = asset\n        if (policyId === \"\" && tokenName === \"\") {\n            return \"lovelace\"\n        }\n        return policyId + tokenName\n    }\n\n    export function toPlutusData(asset: Asset): Constr<Data> {\n        const { policyId, tokenName } = asset\n        return new Constr(0, [\n            policyId,\n            tokenName\n        ])\n    }\n\n    export function fromPlutusData(data: Constr<Data>): Asset {\n        if (data.index !== 0) {\n            throw new Error(`Index of Asset must be 0, actual: ${data.index}`)\n        }\n        return {\n            policyId: data.fields[0] as string,\n            tokenName: data.fields[1] as string\n        }\n    }\n\n    export function compare(a1: Asset, a2: Asset): number {\n        if (a1.policyId === a2.policyId) {\n            return StringUtils.compare(a1.tokenName, a2.tokenName)\n        }\n        return StringUtils.compare(a1.policyId, a2.policyId)\n    }\n\n    export function equals(a1: Asset, a2: Asset): boolean {\n        return a1.policyId === a2.policyId && a1.tokenName === a2.tokenName\n    }\n}","export enum NetworkId {\n  TESTNET = 0,\n  MAINNET,\n}\n\nexport enum NetworkEnvironment {\n  MAINNET = 764824073,\n  TESTNET_PREVIEW = 2,\n  TESTNET_PREPROD = 1,\n}\n","import { Address, OutRef, Script } from \"lucid-cardano\";\n\nimport { NetworkId } from \"./network\";\n\nexport namespace DexV1Constant {\n  export const ORDER_BASE_ADDRESS: Record<number, Address> = {\n    [NetworkId.TESTNET]:\n      \"addr_test1zzn9efv2f6w82hagxqtn62ju4m293tqvw0uhmdl64ch8uwurajt8r8wqtygrfduwgukk73m5gcnplmztc5tl5ngy0upq932hcy\",\n    [NetworkId.MAINNET]:\n      \"addr1zxn9efv2f6w82hagxqtn62ju4m293tqvw0uhmdl64ch8uw6j2c79gy9l76sdg0xwhd7r0c0kna0tycz4y5s6mlenh8pq6s3z70\",\n  };\n\n  export const POOL_SCRIPT_HASH =\n    \"script1uychk9f04tqngfhx4qlqdlug5ntzen3uzc62kzj7cyesjk0d9me\";\n\n  export const FACTORY_POLICY_ID =\n    \"13aa2accf2e1561723aa26871e071fdf32c867cff7e7d50ad470d62f\";\n  export const FACTORY_ASSET_NAME = \"4d494e53574150\";\n  export const LP_POLICY_ID =\n    \"e4214b7cce62ac6fbba385d164df48e157eae5863521b4b67ca71d86\";\n  export const POOL_NFT_POLICY_ID =\n    \"0be55d262b29f564998ff81efe21bdc0022621c12f15af08d0f2ddb1\";\n  export const ORDER_SCRIPT: Script = {\n    type: \"PlutusV1\",\n    script:\n      \"59014f59014c01000032323232323232322223232325333009300e30070021323233533300b3370e9000180480109118011bae30100031225001232533300d3300e22533301300114a02a66601e66ebcc04800400c5288980118070009bac3010300c300c300c300c300c300c300c007149858dd48008b18060009baa300c300b3754601860166ea80184ccccc0288894ccc04000440084c8c94ccc038cd4ccc038c04cc030008488c008dd718098018912800919b8f0014891ce1317b152faac13426e6a83e06ff88a4d62cce3c1634ab0a5ec133090014a0266008444a00226600a446004602600a601a00626600a008601a006601e0026ea8c03cc038dd5180798071baa300f300b300e3754601e00244a0026eb0c03000c92616300a001375400660106ea8c024c020dd5000aab9d5744ae688c8c0088cc0080080048c0088cc00800800555cf2ba15573e6e1d200201\",\n  };\n}\n\nexport namespace StableswapConstant {\n  export type Config = {\n    orderAddress: Address;\n    poolAddress: Address;\n    nftAsset: string;\n    lpAsset: string;\n    assets: string[];\n    multiples: bigint[];\n    fee: bigint;\n    adminFee: bigint;\n    feeDenominator: bigint;\n  };\n\n  export type DeployedScripts = {\n    order: OutRef;\n    pool: OutRef;\n    lp: OutRef;\n    poolBatching: OutRef;\n  };\n\n  export const CONFIG: Record<NetworkId, Config[]> = {\n    [NetworkId.TESTNET]: [\n      {\n        orderAddress:\n          \"addr_test1zq8spknltt6yyz2505rhc5lqw89afc4anhu4u0347n5dz8urajt8r8wqtygrfduwgukk73m5gcnplmztc5tl5ngy0upqa63kst\",\n        poolAddress:\n          \"addr_test1zr3hs60rn9x49ahuduuzmnlhnema0jsl4d3ujrf3cmurhmvrajt8r8wqtygrfduwgukk73m5gcnplmztc5tl5ngy0upqcgz9yc\",\n        nftAsset:\n          \"06fe1ba957728130154154d5e5b25a7b533ebe6c4516356c0aa69355646a65642d697573642d76312e342d6c70\",\n        lpAsset:\n          \"d16339238c9e1fb4d034b6a48facb2f97794a9cdb7bc049dd7c49f54646a65642d697573642d76312e342d6c70\",\n        assets: [\n          \"e16c2dc8ae937e8d3790c7fd7168d7b994621ba14ca11415f39fed7274444a4544\",\n          \"e16c2dc8ae937e8d3790c7fd7168d7b994621ba14ca11415f39fed727469555344\",\n        ],\n        multiples: [1n, 1n],\n        fee: 1000000n,\n        adminFee: 5000000000n,\n        feeDenominator: 10000000000n,\n      },\n      {\n        orderAddress:\n          \"addr_test1zp3mf7r63u8km2d69kh6v2axlvl04yunmmj67vprljuht4urajt8r8wqtygrfduwgukk73m5gcnplmztc5tl5ngy0upqhelj6n\",\n        poolAddress:\n          \"addr_test1zzc8ar93kgntz3lv95uauhe29kj4yj84mxhg5v9dqj4k7p5rajt8r8wqtygrfduwgukk73m5gcnplmztc5tl5ngy0upqujv25l\",\n        nftAsset:\n          \"06fe1ba957728130154154d5e5b25a7b533ebe6c4516356c0aa69355757364632d757364742d76312e342d6c70\",\n        lpAsset:\n          \"8db03e0cc042a5f82434123a0509f590210996f1c7410c94f913ac48757364632d757364742d76312e342d6c70\",\n        assets: [\n          \"e16c2dc8ae937e8d3790c7fd7168d7b994621ba14ca11415f39fed727455534443\",\n          \"e16c2dc8ae937e8d3790c7fd7168d7b994621ba14ca11415f39fed727455534454\",\n        ],\n        multiples: [1n, 1n],\n        fee: 1000000n,\n        adminFee: 5000000000n,\n        feeDenominator: 10000000000n,\n      },\n      {\n        orderAddress:\n          \"addr_test1zqpmw0kkgm6fp9x0asq5vwuaccweeqdv3edhwckqr2gnvzurajt8r8wqtygrfduwgukk73m5gcnplmztc5tl5ngy0upq9z8vxj\",\n        poolAddress:\n          \"addr_test1zqh2uv0wvrtt579e92q35ktkzcj3lj3nzdm3xjpsdack3q5rajt8r8wqtygrfduwgukk73m5gcnplmztc5tl5ngy0upqud27a8\",\n        nftAsset:\n          \"06fe1ba957728130154154d5e5b25a7b533ebe6c4516356c0aa69355646a65642d697573642d6461692d76312e342d6c70\",\n        lpAsset:\n          \"492fd7252d5914c9f5acb7eeb6b905b3a65b9a952c2300de34eb86c5646a65642d697573642d6461692d76312e342d6c70\",\n        assets: [\n          \"e16c2dc8ae937e8d3790c7fd7168d7b994621ba14ca11415f39fed7274444a4544\",\n          \"e16c2dc8ae937e8d3790c7fd7168d7b994621ba14ca11415f39fed727469555344\",\n          \"e16c2dc8ae937e8d3790c7fd7168d7b994621ba14ca11415f39fed7274444149\",\n        ],\n        multiples: [1n, 1n, 1n],\n        fee: 1000000n,\n        adminFee: 5000000000n,\n        feeDenominator: 10000000000n,\n      },\n    ],\n    [NetworkId.MAINNET]: [\n      {\n        orderAddress:\n          \"addr1w9xy6edqv9hkptwzewns75ehq53nk8t73je7np5vmj3emps698n9g\",\n        poolAddress:\n          \"addr1wy7kkcpuf39tusnnyga5t2zcul65dwx9yqzg7sep3cjscesx2q5m5\",\n        nftAsset:\n          \"5d4b6afd3344adcf37ccef5558bb87f522874578c32f17160512e398444a45442d695553442d534c50\",\n        lpAsset:\n          \"2c07095028169d7ab4376611abef750623c8f955597a38cd15248640444a45442d695553442d534c50\",\n        assets: [\n          \"8db269c3ec630e06ae29f74bc39edd1f87c819f1056206e879a1cd61446a65644d6963726f555344\",\n          \"f66d78b4a3cb3d37afa0ec36461e51ecbde00f26c8f0a68f94b6988069555344\",\n        ],\n        multiples: [1n, 1n],\n        fee: 1000000n,\n        adminFee: 5000000000n,\n        feeDenominator: 10000000000n,\n      },\n      {\n        orderAddress:\n          \"addr1w93d8cuht3hvqt2qqfjqgyek3gk5d6ss2j93e5sh505m0ng8cmze2\",\n        poolAddress:\n          \"addr1wx8d45xlfrlxd7tctve8xgdtk59j849n00zz2pgyvv47t8sxa6t53\",\n        nftAsset:\n          \"d97fa91daaf63559a253970365fb219dc4364c028e5fe0606cdbfff9555344432d444a45442d534c50\",\n        lpAsset:\n          \"ac49e0969d76ed5aa9e9861a77be65f4fc29e9a979dc4c37a99eb8f4555344432d444a45442d534c50\",\n        assets: [\n          \"25c5de5f5b286073c593edfd77b48abc7a48e5a4f3d4cd9d428ff93555534443\",\n          \"8db269c3ec630e06ae29f74bc39edd1f87c819f1056206e879a1cd61446a65644d6963726f555344\",\n        ],\n        multiples: [1n, 100n],\n        fee: 1000000n,\n        adminFee: 5000000000n,\n        feeDenominator: 10000000000n,\n      },\n      {\n        orderAddress:\n          \"addr1wxtv9k2lcum5pmcc4wu44a5tufulszahz84knff87wcawycez9lug\",\n        poolAddress:\n          \"addr1w9520fyp6g3pjwd0ymfy4v2xka54ek6ulv4h8vce54zfyfcm2m0sm\",\n        nftAsset:\n          \"96402c6f5e7a04f16b4d6f500ab039ff5eac5d0226d4f88bf5523ce85553444d2d695553442d534c50\",\n        lpAsset:\n          \"31f92531ac9f1af3079701fab7c66ce997eb07988277ee5b9d6403015553444d2d695553442d534c50\",\n        assets: [\n          \"c48cbb3d5e57ed56e276bc45f99ab39abe94e6cd7ac39fb402da47ad0014df105553444d\",\n          \"f66d78b4a3cb3d37afa0ec36461e51ecbde00f26c8f0a68f94b6988069555344\",\n        ],\n        multiples: [1n, 1n],\n        fee: 1000000n,\n        adminFee: 5000000000n,\n        feeDenominator: 10000000000n,\n      },\n      {\n        orderAddress:\n          \"addr1wxr9ppdymqgw6g0hvaaa7wc6j0smwh730ujx6lczgdynehsguav8d\",\n        poolAddress:\n          \"addr1wxxdvtj6y4fut4tmu796qpvy2xujtd836yg69ahat3e6jjcelrf94\",\n        nftAsset:\n          \"07b0869ed7488657e24ac9b27b3f0fb4f76757f444197b2a38a15c3c444a45442d5553444d2d534c50\",\n        lpAsset:\n          \"5b042cf53c0b2ce4f30a9e743b4871ad8c6dcdf1d845133395f55a8e444a45442d5553444d2d534c50\",\n        assets: [\n          \"8db269c3ec630e06ae29f74bc39edd1f87c819f1056206e879a1cd61446a65644d6963726f555344\",\n          \"c48cbb3d5e57ed56e276bc45f99ab39abe94e6cd7ac39fb402da47ad0014df105553444d\",\n        ],\n        multiples: [1n, 1n],\n        fee: 1000000n,\n        adminFee: 5000000000n,\n        feeDenominator: 10000000000n,\n      },\n    ],\n  };\n\n  export const DEPLOYED_SCRIPTS: Record<\n    NetworkId,\n    Record<string, DeployedScripts>\n  > = {\n    [NetworkId.TESTNET]: {\n      \"06fe1ba957728130154154d5e5b25a7b533ebe6c4516356c0aa69355646a65642d697573642d76312e342d6c70\":\n        {\n          order: {\n            txHash:\n              \"527e421bc3eb8b9e5ec0a9ad214bb9b76148f57b9a5a8cbd83a51264f943e91d\",\n            outputIndex: 0,\n          },\n          pool: {\n            txHash:\n              \"527e421bc3eb8b9e5ec0a9ad214bb9b76148f57b9a5a8cbd83a51264f943e91d\",\n            outputIndex: 1,\n          },\n          lp: {\n            txHash:\n              \"527e421bc3eb8b9e5ec0a9ad214bb9b76148f57b9a5a8cbd83a51264f943e91d\",\n            outputIndex: 2,\n          },\n          poolBatching: {\n            txHash:\n              \"527e421bc3eb8b9e5ec0a9ad214bb9b76148f57b9a5a8cbd83a51264f943e91d\",\n            outputIndex: 3,\n          },\n        },\n      \"06fe1ba957728130154154d5e5b25a7b533ebe6c4516356c0aa69355757364632d757364742d76312e342d6c70\":\n        {\n          order: {\n            txHash:\n              \"cf699550642c8ffc1673d1e5d56d8562ca7c7f5c0b513a8428c3f52cdcc8fdb7\",\n            outputIndex: 0,\n          },\n          pool: {\n            txHash:\n              \"cf699550642c8ffc1673d1e5d56d8562ca7c7f5c0b513a8428c3f52cdcc8fdb7\",\n            outputIndex: 1,\n          },\n          lp: {\n            txHash:\n              \"cf699550642c8ffc1673d1e5d56d8562ca7c7f5c0b513a8428c3f52cdcc8fdb7\",\n            outputIndex: 2,\n          },\n          poolBatching: {\n            txHash:\n              \"cf699550642c8ffc1673d1e5d56d8562ca7c7f5c0b513a8428c3f52cdcc8fdb7\",\n            outputIndex: 3,\n          },\n        },\n      \"06fe1ba957728130154154d5e5b25a7b533ebe6c4516356c0aa69355646a65642d697573642d6461692d76312e342d6c70\":\n        {\n          order: {\n            txHash:\n              \"a8ab602259654697c85e2f61752d34cdb631f314eaeded0676fee6f6be70afe7\",\n            outputIndex: 0,\n          },\n          pool: {\n            txHash:\n              \"a8ab602259654697c85e2f61752d34cdb631f314eaeded0676fee6f6be70afe7\",\n            outputIndex: 1,\n          },\n          lp: {\n            txHash:\n              \"a8ab602259654697c85e2f61752d34cdb631f314eaeded0676fee6f6be70afe7\",\n            outputIndex: 2,\n          },\n          poolBatching: {\n            txHash:\n              \"a8ab602259654697c85e2f61752d34cdb631f314eaeded0676fee6f6be70afe7\",\n            outputIndex: 3,\n          },\n        },\n    },\n    [NetworkId.MAINNET]: {\n      \"5d4b6afd3344adcf37ccef5558bb87f522874578c32f17160512e398444a45442d695553442d534c50\":\n        {\n          order: {\n            txHash:\n              \"20227174ec2f7853a71a02c435d063b3bf63851d4e0ad9a0c09250a087a6577e\",\n            outputIndex: 0,\n          },\n          pool: {\n            txHash:\n              \"20227174ec2f7853a71a02c435d063b3bf63851d4e0ad9a0c09250a087a6577e\",\n            outputIndex: 1,\n          },\n          lp: {\n            txHash:\n              \"20227174ec2f7853a71a02c435d063b3bf63851d4e0ad9a0c09250a087a6577e\",\n            outputIndex: 2,\n          },\n          poolBatching: {\n            txHash:\n              \"20227174ec2f7853a71a02c435d063b3bf63851d4e0ad9a0c09250a087a6577e\",\n            outputIndex: 3,\n          },\n        },\n      d97fa91daaf63559a253970365fb219dc4364c028e5fe0606cdbfff9555344432d444a45442d534c50:\n        {\n          order: {\n            txHash:\n              \"8b880e77a726e76e5dd585cda2c4c2ac93f1cfccc06910f00550fb820ae1fc54\",\n            outputIndex: 0,\n          },\n          pool: {\n            txHash:\n              \"8b880e77a726e76e5dd585cda2c4c2ac93f1cfccc06910f00550fb820ae1fc54\",\n            outputIndex: 1,\n          },\n          lp: {\n            txHash:\n              \"8b880e77a726e76e5dd585cda2c4c2ac93f1cfccc06910f00550fb820ae1fc54\",\n            outputIndex: 2,\n          },\n          poolBatching: {\n            txHash:\n              \"8b880e77a726e76e5dd585cda2c4c2ac93f1cfccc06910f00550fb820ae1fc54\",\n            outputIndex: 3,\n          },\n        },\n      \"96402c6f5e7a04f16b4d6f500ab039ff5eac5d0226d4f88bf5523ce85553444d2d695553442d534c50\":\n        {\n          order: {\n            txHash:\n              \"48019a931af442e1eedab6c5b52b3069cf6eadb2483a2131f517e62fddfd5662\",\n            outputIndex: 0,\n          },\n          pool: {\n            txHash:\n              \"48019a931af442e1eedab6c5b52b3069cf6eadb2483a2131f517e62fddfd5662\",\n            outputIndex: 1,\n          },\n          lp: {\n            txHash:\n              \"48019a931af442e1eedab6c5b52b3069cf6eadb2483a2131f517e62fddfd5662\",\n            outputIndex: 2,\n          },\n          poolBatching: {\n            txHash:\n              \"48019a931af442e1eedab6c5b52b3069cf6eadb2483a2131f517e62fddfd5662\",\n            outputIndex: 3,\n          },\n        },\n      \"07b0869ed7488657e24ac9b27b3f0fb4f76757f444197b2a38a15c3c444a45442d5553444d2d534c50\":\n        {\n          order: {\n            txHash:\n              \"dddccee9cd58cbf712f2ff2c49ea20537db681a333c701106aa13cd57aee3873\",\n            outputIndex: 0,\n          },\n          pool: {\n            txHash:\n              \"dddccee9cd58cbf712f2ff2c49ea20537db681a333c701106aa13cd57aee3873\",\n            outputIndex: 1,\n          },\n          lp: {\n            txHash:\n              \"dddccee9cd58cbf712f2ff2c49ea20537db681a333c701106aa13cd57aee3873\",\n            outputIndex: 2,\n          },\n          poolBatching: {\n            txHash:\n              \"dddccee9cd58cbf712f2ff2c49ea20537db681a333c701106aa13cd57aee3873\",\n            outputIndex: 3,\n          },\n        },\n    },\n  };\n}\n\nexport namespace DexV2Constant {\n  export type Config = {\n    factoryAsset: string;\n    poolAuthenAsset: string;\n    globalSettingAsset: string;\n    lpPolicyId: string;\n    globalSettingScriptHash: string;\n    globalSettingScriptHashBech32: string;\n    orderScriptHash: string;\n    poolScriptHash: string;\n    poolScriptHashBech32: string;\n    poolCreationAddress: Address;\n    factoryScriptHashBech32: string;\n    factoryScriptHash: string;\n    factoryAddress: string;\n    expiredOrderCancelAddress: string;\n    poolBatchingAddress: string;\n    orderEnterpriseAddress: string;\n  };\n\n  export type DeployedScripts = {\n    order: OutRef;\n    pool: OutRef;\n    factory: OutRef;\n    authen: OutRef;\n    poolBatching: OutRef;\n    expiredOrderCancellation: OutRef;\n  };\n\n  export const CONFIG: Record<NetworkId, Config> = {\n    [NetworkId.TESTNET]: {\n      factoryAsset:\n        \"d6aae2059baee188f74917493cf7637e679cd219bdfbbf4dcbeb1d0b4d5346\",\n      poolAuthenAsset:\n        \"d6aae2059baee188f74917493cf7637e679cd219bdfbbf4dcbeb1d0b4d5350\",\n      globalSettingAsset:\n        \"d6aae2059baee188f74917493cf7637e679cd219bdfbbf4dcbeb1d0b4d534753\",\n      lpPolicyId: \"d6aae2059baee188f74917493cf7637e679cd219bdfbbf4dcbeb1d0b\",\n      globalSettingScriptHash:\n        \"d6aae2059baee188f74917493cf7637e679cd219bdfbbf4dcbeb1d0b\",\n      globalSettingScriptHashBech32:\n        \"script1664wypvm4msc3a6fzayneamr0enee5sehham7nwtavwsk2s2vg9\",\n      orderScriptHash:\n        \"da9525463841173ad1230b1d5a1b5d0a3116bbdeb4412327148a1b7a\",\n      poolScriptHash:\n        \"d6ba9b7509eac866288ff5072d2a18205ac56f744bc82dcd808cb8fe\",\n      poolScriptHashBech32:\n        \"script166afkagfatyxv2y075rj62scypdv2mm5f0yzmnvq3ju0uqqmszv\",\n      poolCreationAddress:\n        \"addr_test1zrtt4xm4p84vse3g3l6swtf2rqs943t0w39ustwdszxt3l5rajt8r8wqtygrfduwgukk73m5gcnplmztc5tl5ngy0upqhns793\",\n      factoryScriptHash:\n        \"6e23fe172b5b50e2ad59aded9ee8d488f74c7f4686f91b032220adad\",\n      factoryScriptHashBech32:\n        \"script1dc3lu9ettdgw9t2e4hkea6x53rm5cl6xsmu3kqezyzk66vpljxc\",\n      factoryAddress:\n        \"addr_test1zphz8lsh9dd4pc4dtxk7m8hg6jy0wnrlg6r0jxcrygs2mtvrajt8r8wqtygrfduwgukk73m5gcnplmztc5tl5ngy0upqjgg24z\",\n      expiredOrderCancelAddress:\n        \"stake_test17rytpnrpxax5p8leepgjx9cq8ecedgly6jz4xwvvv4kvzfqz6sgpf\",\n      poolBatchingAddress:\n        \"stake_test17rann6nth9675m0y5tz32u3rfhzcfjymanxqnfyexsufu5glcajhf\",\n      orderEnterpriseAddress:\n        \"addr_test1wrdf2f2x8pq3wwk3yv936ksmt59rz94mm66yzge8zj9pk7s0kjph3\",\n    },\n    [NetworkId.MAINNET]: {\n      factoryAsset:\n        \"f5808c2c990d86da54bfc97d89cee6efa20cd8461616359478d96b4c4d5346\",\n      poolAuthenAsset:\n        \"f5808c2c990d86da54bfc97d89cee6efa20cd8461616359478d96b4c4d5350\",\n      globalSettingAsset:\n        \"f5808c2c990d86da54bfc97d89cee6efa20cd8461616359478d96b4c4d534753\",\n      lpPolicyId: \"f5808c2c990d86da54bfc97d89cee6efa20cd8461616359478d96b4c\",\n      globalSettingScriptHash:\n        \"f5808c2c990d86da54bfc97d89cee6efa20cd8461616359478d96b4c\",\n      globalSettingScriptHashBech32:\n        \"script17kqgctyepkrd549le97cnnhxa73qekzxzctrt9rcm945c880puk\",\n      orderScriptHash:\n        \"c3e28c36c3447315ba5a56f33da6a6ddc1770a876a8d9f0cb3a97c4c\",\n      poolScriptHash:\n        \"ea07b733d932129c378af627436e7cbc2ef0bf96e0036bb51b3bde6b\",\n      poolScriptHashBech32:\n        \"script1agrmwv7exgffcdu27cn5xmnuhsh0p0ukuqpkhdgm800xksw7e2w\",\n      poolCreationAddress:\n        \"addr1z84q0denmyep98ph3tmzwsmw0j7zau9ljmsqx6a4rvaau66j2c79gy9l76sdg0xwhd7r0c0kna0tycz4y5s6mlenh8pq777e2a\",\n      factoryScriptHash:\n        \"7bc5fbd41a95f561be84369631e0e35895efb0b73e0a7480bb9ed730\",\n      factoryScriptHashBech32:\n        \"script100zlh4q6jh6kr05yx6trrc8rtz27lv9h8c98fq9mnmtnqfa47eg\",\n      factoryAddress:\n        \"addr1z9aut775r22l2cd7ssmfvv0qudvftmaskulq5ayqhw0dwvzj2c79gy9l76sdg0xwhd7r0c0kna0tycz4y5s6mlenh8pqgjw6pl\",\n      expiredOrderCancelAddress:\n        \"stake178ytpnrpxax5p8leepgjx9cq8ecedgly6jz4xwvvv4kvzfq9s6295\",\n      poolBatchingAddress:\n        \"stake17y02a946720zw6pw50upt2arvxsvvpvaghjtl054h0f0gjsfyjz59\",\n      orderEnterpriseAddress:\n        \"addr1w8p79rpkcdz8x9d6tft0x0dx5mwuzac2sa4gm8cvkw5hcnqst2ctf\",\n    },\n  };\n\n  export const DEPLOYED_SCRIPTS: Record<NetworkId, DeployedScripts> = {\n    [NetworkId.TESTNET]: {\n      order: {\n        txHash:\n          \"8c98f0530cba144d264fbd2731488af25257d7ce6a0cd1586fc7209363724f03\",\n        outputIndex: 0,\n      },\n      pool: {\n        txHash:\n          \"9f30b1c3948a009ceebda32d0b1d25699674b2eaf8b91ef029a43bfc1073ce28\",\n        outputIndex: 0,\n      },\n      factory: {\n        txHash:\n          \"9741d59656e9ad54f197b0763482eede9a6fa1616c4547797eee6617f92a1396\",\n        outputIndex: 0,\n      },\n      authen: {\n        txHash:\n          \"c429b8ee27e5761ba8714e26e3a5899886cd28d136d43e969d4bc1acf0f72d4a\",\n        outputIndex: 0,\n      },\n      poolBatching: {\n        txHash:\n          \"b0a6c5512735c7a183a167eed035ac75c191d6ff5be9736dfa1f1f02f7ae5dbc\",\n        outputIndex: 0,\n      },\n      expiredOrderCancellation: {\n        txHash:\n          \"ee718dd86e3cb89e802aa8b2be252fccf6f15263f4a26b5f478c5135c40264c6\",\n        outputIndex: 0,\n      },\n    },\n    [NetworkId.MAINNET]: {\n      order: {\n        txHash:\n          \"cf4ecddde0d81f9ce8fcc881a85eb1f8ccdaf6807f03fea4cd02da896a621776\",\n        outputIndex: 0,\n      },\n      pool: {\n        txHash:\n          \"2536194d2a976370a932174c10975493ab58fd7c16395d50e62b7c0e1949baea\",\n        outputIndex: 0,\n      },\n      factory: {\n        txHash:\n          \"59c7fa5c30cbab4e6d38f65e15d1adef71495321365588506ad089d237b602e0\",\n        outputIndex: 0,\n      },\n      authen: {\n        txHash:\n          \"dbc1498500a6e79baa0f34d10de55cdb4289ca6c722bd70e1e1b78a858f136b9\",\n        outputIndex: 0,\n      },\n      poolBatching: {\n        txHash:\n          \"d46bd227bd2cf93dedd22ae9b6d92d30140cf0d68b756f6608e38d680c61ad17\",\n        outputIndex: 0,\n      },\n      expiredOrderCancellation: {\n        txHash:\n          \"ef3acc7dfc5a98bffe8f4d4400e65a9ade5a1316b2fcb7145c3b83dba38a66f5\",\n        outputIndex: 0,\n      },\n    },\n  };\n}\n\nexport enum MetadataMessage {\n  DEPOSIT_ORDER = \"SDK Minswap: Deposit Order\",\n  CANCEL_ORDER = \"SDK Minswap: Cancel Order\",\n  ZAP_IN_ORDER = \"SDK Minswap: Zap Order\",\n  ZAP_OUT_ORDER = \"SDK Minswap: Zap Out Order\",\n  SWAP_EXACT_IN_ORDER = \"SDK Minswap: Swap Exact In Order\",\n  SWAP_EXACT_IN_LIMIT_ORDER = \"SDK Minswap: Swap Exact In Limit Order\",\n  SWAP_EXACT_OUT_ORDER = \"SDK Minswap: Swap Exact Out Order\",\n  WITHDRAW_ORDER = \"SDK Minswap: Withdraw Order\",\n  STOP_ORDER = \"SDK Minswap: Stop Order\",\n  OCO_ORDER = \"SDK Minswap: OCO Order\",\n  ROUTING_ORDER = \"SDK Minswap: Routing Order\",\n  PARTIAL_SWAP_ORDER = \"SDK Minswap: Partial Fill Order\",\n  DONATION_ORDER = \"Minswap: Donation Order\",\n  MIXED_ORDERS = \"SDK Minswap: Mixed Orders\",\n  CREATE_POOL = \"SDK Minswap: Create Pool\",\n}\n\nexport const FIXED_DEPOSIT_ADA = 2_000_000n;\n","import { Constr, Data } from \"lucid-cardano\";\n\nimport { Asset } from \"./asset\";\nimport { DexV2Constant } from \"./constants\";\nimport { NetworkId } from \"./network\";\nimport { TxIn, Value } from \"./tx.internal\";\n\nexport namespace FactoryV2 {\n    export type Datum = {\n        head: string;\n        tail: string;\n    }\n\n    export namespace Datum {\n        export function toPlutusData(datum: Datum): Constr<Data> {\n            return new Constr(0, [\n                datum.head,\n                datum.tail\n            ])\n        }\n\n        export function fromPlutusData(data: Constr<Data>): Datum {\n            if (data.index !== 0) {\n                throw new Error(`Index of Factory V2 Datum must be 0, actual: ${data.index}`);\n            }\n            return {\n                head: data.fields[0] as string,\n                tail: data.fields[1] as string\n            }\n        }\n    }\n\n    export type Redeemer = {\n        assetA: Asset,\n        assetB: Asset\n    }\n\n    export namespace Redeemer {\n        export function toPlutusData(redeemer: Redeemer): Constr<Data> {\n            return new Constr(0, [\n                Asset.toPlutusData(redeemer.assetA),\n                Asset.toPlutusData(redeemer.assetB)\n            ])\n        }\n\n        export function fromPlutusData(data: Constr<Data>): Redeemer {\n            if (data.index !== 0) {\n                throw new Error(`Index of Factory V2 Datum must be 0, actual: ${data.index}`);\n            }\n            return {\n                assetA: Asset.fromPlutusData(data.fields[0] as Constr<Data>),\n                assetB: Asset.fromPlutusData(data.fields[1] as Constr<Data>)\n            }\n        }\n    }\n\n    export class State {\n        public readonly address: string;\n        public readonly txIn: TxIn;\n        public readonly value: Value;\n        public readonly datumCbor: string;\n        public readonly datum: Datum;\n\n        constructor(\n            networkId: NetworkId,\n            address: string,\n            txIn: TxIn,\n            value: Value,\n            datum: string\n        ) {\n            this.address = address\n            this.txIn = txIn\n            this.value = value\n            this.datumCbor = datum\n            this.datum = Datum.fromPlutusData(Data.from(datum))\n\n            const config = DexV2Constant.CONFIG[networkId]\n            if (!value.find((v) => v.unit === config.factoryAsset && v.quantity === \"1\")) {\n                throw new Error(\"Cannot find the Factory Authentication Asset in the value\")\n            }\n        }\n\n        get head(): string {\n            return this.datum.head\n        }\n\n        get tail(): string {\n            return this.datum.tail\n        }\n    }\n}","import { SHA3 } from \"sha3\";\n\nexport function sha3(hex: string): string {\n    const hash = new SHA3(256);\n    hash.update(hex, \"hex\");\n    return hash.digest(\"hex\");\n}","import invariant from \"@minswap/tiny-invariant\";\nimport {\n  Address,\n  C,\n  Constr,\n  Credential,\n  Data,\n  getAddressDetails,\n} from \"lucid-cardano\";\n\nimport { NetworkId } from \"./network\";\n\nexport namespace LucidCredential {\n  export function toPlutusData(data: Credential): Constr<Data> {\n    const constructor = data.type === \"Key\" ? 0 : 1;\n    return new Constr(constructor, [data.hash]);\n  }\n\n  export function fromPlutusData(data: Constr<Data>): Credential {\n    switch (data.index) {\n      case 0: {\n        return {\n          type: \"Key\",\n          hash: data.fields[0] as string,\n        };\n      }\n      case 1: {\n        return {\n          type: \"Script\",\n          hash: data.fields[0] as string,\n        };\n      }\n      default: {\n        throw new Error(\n          `Index of Credentail must be 0 or 1, actual: ${data.index}`\n        );\n      }\n    }\n  }\n\n  export function toCSLStakeCredential(\n    credential: Credential\n  ): C.StakeCredential {\n    switch (credential.type) {\n      case \"Key\": {\n        return C.StakeCredential.from_keyhash(\n          C.Ed25519KeyHash.from_hex(credential.hash)\n        );\n      }\n      case \"Script\": {\n        return C.StakeCredential.from_scripthash(\n          C.ScriptHash.from_hex(credential.hash)\n        );\n      }\n    }\n  }\n}\n\nexport namespace AddressPlutusData {\n  export function toPlutusData(address: Address): Constr<Data> {\n    const addressDetails = getAddressDetails(address);\n    if (addressDetails.type === \"Base\") {\n      invariant(\n        addressDetails.paymentCredential && addressDetails.stakeCredential,\n        \"baseAddress must have both paymentCredential and stakeCredential\"\n      );\n\n      return new Constr(0, [\n        LucidCredential.toPlutusData(addressDetails.paymentCredential),\n        new Constr(0, [\n          new Constr(0, [\n            LucidCredential.toPlutusData(addressDetails.stakeCredential),\n          ]),\n        ]),\n      ]);\n    }\n    if (addressDetails.type === \"Enterprise\") {\n      invariant(\n        addressDetails.paymentCredential,\n        \"EnterpriseAddress must has paymentCredential\"\n      );\n      return new Constr(0, [\n        LucidCredential.toPlutusData(addressDetails.paymentCredential),\n        new Constr(1, []),\n      ]);\n    }\n    throw new Error(\"only supports base address, enterprise address\");\n  }\n\n  export function fromPlutusData(\n    networkId: NetworkId,\n    data: Constr<Data>\n  ): Address {\n    switch (data.index) {\n      case 0: {\n        const paymentCredential = LucidCredential.fromPlutusData(\n          data.fields[0] as Constr<Data>\n        );\n        const cslPaymentCredential =\n          LucidCredential.toCSLStakeCredential(paymentCredential);\n        const maybeStakeCredentialConstr = data.fields[1] as Constr<Data>;\n        switch (maybeStakeCredentialConstr.index) {\n          case 0: {\n            // Base Address or Pointer Address\n            const stakeCredentialConstr = maybeStakeCredentialConstr\n              .fields[0] as Constr<Data>;\n            switch (stakeCredentialConstr.index) {\n              case 0: {\n                const stakeCredential = LucidCredential.fromPlutusData(\n                  stakeCredentialConstr.fields[0] as Constr<Data>\n                );\n                const cslStakeCredential =\n                  LucidCredential.toCSLStakeCredential(stakeCredential);\n                const cslAddress = C.BaseAddress.new(\n                  networkId,\n                  cslPaymentCredential,\n                  cslStakeCredential\n                ).to_address();\n                return cslAddress.to_bech32(undefined);\n              }\n              case 1: {\n                throw new Error(`Pointer Address has not been supported yet`);\n              }\n              default: {\n                throw new Error(\n                  `Index of StakeCredentail must be 0 or 1, actual: ${stakeCredentialConstr.index}`\n                );\n              }\n            }\n          }\n          case 1: {\n            // Enterprise Address\n            const cslAddress = C.EnterpriseAddress.new(\n              networkId,\n              cslPaymentCredential\n            ).to_address();\n            return cslAddress.to_bech32(undefined);\n          }\n          default: {\n            throw new Error(\n              `Index of Maybe Stake Credentail must be 0 or 1, actual: ${maybeStakeCredentialConstr.index}`\n            );\n          }\n        }\n      }\n      default: {\n        throw new Error(`Index of Address must be 0, actual: ${data.index}`);\n      }\n    }\n  }\n}\n","import { C } from \"lucid-cardano\";\n\nexport function getScriptHashFromAddress(addr: string): string | null {\n  const cslAddr = C.Address.from_bech32(addr);\n  const specificAddr =\n    C.BaseAddress.from_address(cslAddr) ||\n    C.EnterpriseAddress.from_address(cslAddr) ||\n    C.PointerAddress.from_address(cslAddr) ||\n    C.RewardAddress.from_address(cslAddr);\n  if (!specificAddr) {\n    return null;\n  }\n  return (\n    specificAddr.payment_cred().to_scripthash()?.to_bech32(\"script\") ?? null\n  );\n}\n","import invariant from \"@minswap/tiny-invariant\";\nimport { Address, Constr, Data } from \"lucid-cardano\";\n\nimport { getScriptHashFromAddress } from \"../utils/address-utils.internal\";\nimport { AddressPlutusData } from \"./address.internal\";\nimport { DexV1Constant } from \"./constants\";\nimport { NetworkId } from \"./network\";\nimport { Value } from \"./tx.internal\";\n\n// ADA goes first\n// If non-ADA, then sort lexicographically\nexport function normalizeAssets(a: string, b: string): [string, string] {\n  if (a === \"lovelace\") {\n    return [a, b];\n  }\n  if (b === \"lovelace\") {\n    return [b, a];\n  }\n  if (a < b) {\n    return [a, b];\n  } else {\n    return [b, a];\n  }\n}\n\nexport type PoolFeeSharing = {\n  feeTo: Address;\n  feeToDatumHash?: string;\n};\n\nexport namespace PoolFeeSharing {\n  export function toPlutusData(feeSharing: PoolFeeSharing): Constr<Data> {\n    const { feeTo, feeToDatumHash } = feeSharing;\n    return new Constr(0, [\n      AddressPlutusData.toPlutusData(feeTo),\n      feeToDatumHash ? new Constr(0, [feeToDatumHash]) : new Constr(1, []),\n    ]);\n  }\n\n  export function fromPlutusData(\n    networkId: NetworkId,\n    data: Constr<Data>\n  ): PoolFeeSharing {\n    if (data.index !== 0) {\n      throw new Error(\n        `Index of Pool Profit Sharing must be 0, actual: ${data.index}`\n      );\n    }\n    let feeToDatumHash: string | undefined = undefined;\n    const maybeFeeToDatumHash = data.fields[1] as Constr<Data>;\n    switch (maybeFeeToDatumHash.index) {\n      case 0: {\n        feeToDatumHash = maybeFeeToDatumHash.fields[0] as string;\n        break;\n      }\n      case 1: {\n        feeToDatumHash = undefined;\n        break;\n      }\n      default: {\n        throw new Error(\n          `Index of Fee To DatumHash must be 0 or 1, actual: ${maybeFeeToDatumHash.index}`\n        );\n      }\n    }\n    return {\n      feeTo: AddressPlutusData.fromPlutusData(\n        networkId,\n        data.fields[0] as Constr<Data>\n      ),\n      feeToDatumHash: feeToDatumHash,\n    };\n  }\n}\n\nexport function checkValidPoolOutput(\n  poolAddress: string,\n  value: Value,\n  datumHash: string | null\n): void {\n  invariant(\n    getScriptHashFromAddress(poolAddress) === DexV1Constant.POOL_SCRIPT_HASH,\n    `invalid pool address: ${poolAddress}`\n  );\n  // must have 1 factory token\n  if (\n    value.find(\n      ({ unit }) => unit === `${DexV1Constant.FACTORY_POLICY_ID}${DexV1Constant.FACTORY_ASSET_NAME}`\n    )?.quantity !== \"1\"\n  ) {\n    throw new Error(`expect pool to have 1 factory token`);\n  }\n  invariant(datumHash, `expect pool to have datum hash, got ${datumHash}`);\n}\n\nexport function isValidPoolOutput(\n  poolAddress: string,\n  value: Value,\n  datumHash: string | null\n): boolean {\n  try {\n    checkValidPoolOutput(poolAddress, value, datumHash);\n    return true;\n  } catch (err) {\n    return false;\n  }\n}\n","import invariant from \"@minswap/tiny-invariant\";\nimport { Constr, Credential, Data } from \"lucid-cardano\";\n\nimport { sha3 } from \"../utils/hash.internal\";\nimport { LucidCredential } from \"./address.internal\";\nimport { ADA, Asset } from \"./asset\";\nimport {\n  DexV1Constant,\n  DexV2Constant,\n  StableswapConstant,\n} from \"./constants\";\nimport { NetworkId } from \"./network\";\nimport { normalizeAssets, PoolFeeSharing } from \"./pool.internal\";\nimport { TxIn, Value } from \"./tx.internal\";\n\nexport const DEFAULT_POOL_V2_TRADING_FEE_DENOMINATOR = 10000n;\n\nexport namespace PoolV1 {\n  /**\n   * Represents state of a pool UTxO. The state could be latest state or a historical state.\n   */\n  export class State {\n    /** The transaction hash and output index of the pool UTxO */\n    public readonly address: string;\n    public readonly txIn: TxIn;\n    public readonly value: Value;\n    public readonly datumHash: string;\n    public readonly assetA: string;\n    public readonly assetB: string;\n\n    constructor(address: string, txIn: TxIn, value: Value, datumHash: string) {\n      this.address = address;\n      this.txIn = txIn;\n      this.value = value;\n      this.datumHash = datumHash;\n\n      const nft = value.find(({ unit }) => unit.startsWith(DexV1Constant.POOL_NFT_POLICY_ID));\n      invariant(nft, \"pool doesn't have NFT\");\n      const poolId = nft.unit.slice(56);\n      // validate and memoize assetA and assetB\n      const relevantAssets = value.filter(\n        ({ unit }) =>\n          !unit.startsWith(DexV1Constant.FACTORY_POLICY_ID) && // factory token\n          !unit.endsWith(poolId) // NFT and LP tokens from profit sharing\n      );\n      switch (relevantAssets.length) {\n        case 2: {\n          // ADA/A pool\n          this.assetA = \"lovelace\";\n          const nonADAAssets = relevantAssets.filter(\n            ({ unit }) => unit !== \"lovelace\"\n          );\n          invariant(nonADAAssets.length === 1, \"pool must have 1 non-ADA asset\");\n          this.assetB = nonADAAssets[0].unit;\n          break;\n        }\n        case 3: {\n          // A/B pool\n          const nonADAAssets = relevantAssets.filter(\n            ({ unit }) => unit !== \"lovelace\"\n          );\n          invariant(nonADAAssets.length === 2, \"pool must have 1 non-ADA asset\");\n          [this.assetA, this.assetB] = normalizeAssets(\n            nonADAAssets[0].unit,\n            nonADAAssets[1].unit\n          );\n          break;\n        }\n        default:\n          throw new Error(\n            \"pool must have 2 or 3 assets except factory, NFT and LP tokens\"\n          );\n      }\n    }\n\n    get nft(): string {\n      const nft = this.value.find(({ unit }) =>\n        unit.startsWith(DexV1Constant.POOL_NFT_POLICY_ID)\n      );\n      invariant(nft, \"pool doesn't have NFT\");\n      return nft.unit;\n    }\n\n    get id(): string {\n      // a pool's ID is the NFT's asset name\n      return this.nft.slice(DexV1Constant.POOL_NFT_POLICY_ID.length);\n    }\n\n    get assetLP(): string {\n      return `${DexV1Constant.LP_POLICY_ID}${this.id}`;\n    }\n\n    get reserveA(): bigint {\n      return BigInt(\n        this.value.find(({ unit }) => unit === this.assetA)?.quantity ?? \"0\"\n      );\n    }\n\n    get reserveB(): bigint {\n      return BigInt(\n        this.value.find(({ unit }) => unit === this.assetB)?.quantity ?? \"0\"\n      );\n    }\n  }\n\n  export type Datum = {\n    assetA: Asset;\n    assetB: Asset;\n    totalLiquidity: bigint;\n    rootKLast: bigint;\n    feeSharing?: PoolFeeSharing;\n  };\n\n  export namespace Datum {\n    export function toPlutusData(datum: Datum): Constr<Data> {\n      const { assetA, assetB, totalLiquidity, rootKLast, feeSharing } = datum;\n      return new Constr(0, [\n        Asset.toPlutusData(assetA),\n        Asset.toPlutusData(assetB),\n        totalLiquidity,\n        rootKLast,\n        feeSharing\n          ? new Constr(0, [PoolFeeSharing.toPlutusData(feeSharing)])\n          : new Constr(1, []),\n      ]);\n    }\n\n    export function fromPlutusData(\n      networkId: NetworkId,\n      data: Constr<Data>\n    ): Datum {\n      if (data.index !== 0) {\n        throw new Error(`Index of Pool Datum must be 0, actual: ${data.index}`);\n      }\n      let feeSharing: PoolFeeSharing | undefined = undefined;\n      const maybeFeeSharingConstr = data.fields[4] as Constr<Data>;\n      switch (maybeFeeSharingConstr.index) {\n        case 0: {\n          feeSharing = PoolFeeSharing.fromPlutusData(\n            networkId,\n            maybeFeeSharingConstr.fields[0] as Constr<Data>\n          );\n          break;\n        }\n        case 1: {\n          feeSharing = undefined;\n          break;\n        }\n        default: {\n          throw new Error(\n            `Index of Pool Fee Sharing must be 0 or 1, actual: ${maybeFeeSharingConstr.index}`\n          );\n        }\n      }\n      return {\n        assetA: Asset.fromPlutusData(data.fields[0] as Constr<Data>),\n        assetB: Asset.fromPlutusData(data.fields[1] as Constr<Data>),\n        totalLiquidity: data.fields[2] as bigint,\n        rootKLast: data.fields[3] as bigint,\n        feeSharing: feeSharing,\n      };\n    }\n  }\n}\n\nexport namespace StablePool {\n  export class State {\n    public readonly address: string;\n    public readonly txIn: TxIn;\n    public readonly value: Value;\n    public readonly datumCbor: string;\n    public readonly datum: Datum;\n    public readonly config: StableswapConstant.Config\n\n    constructor(\n      networkId: NetworkId,\n      address: string,\n      txIn: TxIn,\n      value: Value,\n      datum: string\n    ) {\n      this.address = address\n      this.txIn = txIn\n      this.value = value\n      this.datumCbor = datum\n      this.datum = Datum.fromPlutusData(Data.from(datum))\n      const allConfigs = StableswapConstant.CONFIG[networkId]\n      const config = allConfigs.find((cfg) => cfg.poolAddress === address)\n      if (!config) {\n        throw new Error(\"Invalid Stable Pool address\")\n      }\n      this.config = config\n      if (!value.find((v) => v.unit === config.nftAsset && v.quantity === \"1\")) {\n        throw new Error(\"Cannot find the Pool NFT in the value\")\n      }\n    }\n\n    get assets(): string[] {\n      return this.config.assets\n    }\n\n    get nft(): string {\n      return this.config.nftAsset\n    }\n\n    get lpAsset(): string {\n      return this.config.lpAsset\n    }\n\n    get reserves(): bigint[] {\n      return this.datum.balances\n    }\n\n    get totalLiquidity(): bigint {\n      return this.datum.totalLiquidity\n    }\n\n    get orderHash(): string {\n      return this.datum.orderHash\n    }\n\n    get amp(): bigint {\n      return this.datum.amplificationCoefficient\n    }\n\n    get id(): string {\n      return this.nft\n    }\n  }\n\n  export type Datum = {\n    balances: bigint[];\n    totalLiquidity: bigint;\n    amplificationCoefficient: bigint;\n    orderHash: string;\n  }\n\n  export namespace Datum {\n    export function toPlutusData(datum: Datum): Constr<Data> {\n      const { balances, totalLiquidity, amplificationCoefficient, orderHash } = datum;\n      return new Constr(0, [\n        balances,\n        totalLiquidity,\n        amplificationCoefficient,\n        orderHash\n      ]);\n    }\n\n    export function fromPlutusData(data: Constr<Data>): Datum {\n      if (data.index !== 0) {\n        throw new Error(`Index of Pool Datum must be 0, actual: ${data.index}`);\n      }\n      return {\n        balances: data.fields[0] as bigint[],\n        totalLiquidity: data.fields[1] as bigint,\n        amplificationCoefficient: data.fields[2] as bigint,\n        orderHash: data.fields[3] as string\n      }\n    }\n  }\n}\n\nexport namespace PoolV2 {\n  export const MAX_LIQUIDITY = 9_223_372_036_854_775_807n;\n  export const DEFAULT_POOL_ADA = 4_500_000n;\n  // The amount of liquidity that will be locked in pool when creating pools\n  export const MINIMUM_LIQUIDITY = 10n;\n  export const DEFAULT_TRADING_FEE_DENOMINATOR = 10000n;\n\n  export function computeLPAssetName(assetA: Asset, assetB: Asset): string {\n    const k1 = sha3(assetA.policyId + assetA.tokenName);\n    const k2 = sha3(assetB.policyId + assetB.tokenName);\n    return sha3(k1 + k2);\n  }\n\n  export type Info = {\n    datumReserves: [bigint, bigint];\n    valueReserves: [bigint, bigint];\n    totalLiquidity: bigint;\n    tradingFee: {\n      feeANumerator: bigint;\n      feeBNumerator: bigint;\n    };\n    feeSharingNumerator?: bigint;\n  }\n  export class State {\n    public readonly address: string;\n    public readonly txIn: TxIn;\n    public readonly value: Value;\n    public readonly datumRaw: string;\n    public readonly datum: Datum;\n    public readonly config: DexV2Constant.Config\n    public readonly lpAsset: Asset;\n    public readonly authenAsset: Asset;\n    constructor(\n      networkId: NetworkId,\n      address: string,\n      txIn: TxIn,\n      value: Value,\n      datum: string\n    ) {\n      this.address = address\n      this.txIn = txIn\n      this.value = value\n      this.datumRaw = datum\n      this.datum = Datum.fromPlutusData(Data.from(datum))\n      this.config = DexV2Constant.CONFIG[networkId]\n      this.lpAsset = {\n        policyId: this.config.lpPolicyId,\n        tokenName: computeLPAssetName(this.datum.assetA, this.datum.assetB)\n      }\n      this.authenAsset = Asset.fromString(this.config.poolAuthenAsset)\n      if (!value.find((v) => v.unit === this.config.poolAuthenAsset && v.quantity === \"1\")) {\n        throw new Error(\"Cannot find the Pool Authentication Asset in the value\")\n      }\n    }\n\n    get assetA(): string {\n      return Asset.toString(this.datum.assetA)\n    }\n\n    get assetB(): string {\n      return Asset.toString(this.datum.assetB)\n    }\n\n    get totalLiquidity(): bigint {\n      return this.datum.totalLiquidity\n    }\n\n    get reserveA(): bigint {\n      return this.datum.reserveA\n    }\n\n    get reserveB(): bigint {\n      return this.datum.reserveB\n    }\n\n    get feeA(): [bigint, bigint] {\n      return [\n        this.datum.baseFee.feeANumerator,\n        DEFAULT_POOL_V2_TRADING_FEE_DENOMINATOR\n      ]\n    }\n\n    get feeB(): [bigint, bigint] {\n      return [\n        this.datum.baseFee.feeBNumerator,\n        DEFAULT_POOL_V2_TRADING_FEE_DENOMINATOR\n      ]\n    }\n\n    get feeShare(): [bigint, bigint] | undefined {\n      if (this.datum.feeSharingNumerator !== undefined) {\n        return [\n          this.datum.feeSharingNumerator,\n          DEFAULT_POOL_V2_TRADING_FEE_DENOMINATOR\n        ]\n      } else {\n        return undefined\n      }\n    }\n\n    get datumReserves(): [bigint, bigint] {\n      return [this.datum.reserveA, this.datum.reserveB]\n    }\n\n    get valueReserveA(): bigint {\n      const amount = BigInt(this.value.find((v) => v.unit === this.assetA)?.quantity ?? \"0\")\n      if (Asset.equals(this.datum.assetA, ADA)) {\n        return amount - DEFAULT_POOL_ADA;\n      }\n      return amount;\n    }\n\n    get valueReserveB(): bigint {\n      return BigInt(this.value.find((v) => v.unit === this.assetB)?.quantity ?? \"0\")\n    }\n\n    get valueReserves(): [bigint, bigint] {\n      return [this.valueReserveA, this.valueReserveB];\n    }\n\n    get info(): Info {\n      return {\n        datumReserves: this.datumReserves,\n        valueReserves: this.valueReserves,\n        totalLiquidity: this.datum.totalLiquidity,\n        tradingFee: this.datum.baseFee,\n        feeSharingNumerator: this.datum.feeSharingNumerator\n      }\n    }\n  }\n\n  export type Datum = {\n    poolBatchingStakeCredential: Credential;\n    assetA: Asset;\n    assetB: Asset;\n    totalLiquidity: bigint;\n    reserveA: bigint;\n    reserveB: bigint;\n    baseFee: {\n      feeANumerator: bigint;\n      feeBNumerator: bigint;\n    };\n    feeSharingNumerator?: bigint;\n    allowDynamicFee: boolean;\n  }\n\n  export namespace Datum {\n    export function toPlutusData(datum: Datum): Constr<Data> {\n      const {\n        poolBatchingStakeCredential,\n        assetA,\n        assetB,\n        totalLiquidity,\n        reserveA,\n        reserveB,\n        baseFee,\n        feeSharingNumerator,\n        allowDynamicFee\n      } = datum;\n      return new Constr(0, [\n        new Constr(0, [LucidCredential.toPlutusData(poolBatchingStakeCredential)]),\n        Asset.toPlutusData(assetA),\n        Asset.toPlutusData(assetB),\n        totalLiquidity,\n        reserveA,\n        reserveB,\n        baseFee.feeANumerator,\n        baseFee.feeBNumerator,\n        feeSharingNumerator !== undefined\n          ? new Constr(0, [feeSharingNumerator])\n          : new Constr(1, []),\n        new Constr(allowDynamicFee ? 1 : 0, [])\n      ]);\n    }\n\n    export function fromPlutusData(data: Constr<Data>): Datum {\n      if (data.index !== 0) {\n        throw new Error(`Index of Pool Datum must be 0, actual: ${data.index}`);\n      }\n      const stakeCredentialConstr = data.fields[0] as Constr<Data>\n      if (stakeCredentialConstr.index !== 0) {\n        throw new Error(`Index of Stake Credential must be 0, actual: ${stakeCredentialConstr.index}`);\n      }\n      let feeSharingNumerator: bigint | undefined = undefined;\n      const maybeFeeSharingConstr = data.fields[8] as Constr<Data>;\n      switch (maybeFeeSharingConstr.index) {\n        case 0: {\n          feeSharingNumerator = maybeFeeSharingConstr.fields[0] as bigint\n          break;\n        }\n        case 1: {\n          feeSharingNumerator = undefined;\n          break;\n        }\n        default: {\n          throw new Error(\n            `Index of Pool Fee Sharing must be 0 or 1, actual: ${maybeFeeSharingConstr.index}`\n          );\n        }\n      }\n      const allowDynamicFeeConstr = data.fields[9] as Constr<Data>;\n      const allowDynamicFee = allowDynamicFeeConstr.index === 1;\n      return {\n        poolBatchingStakeCredential: LucidCredential.fromPlutusData(stakeCredentialConstr.fields[0] as Constr<Data>),\n        assetA: Asset.fromPlutusData(data.fields[1] as Constr<Data>),\n        assetB: Asset.fromPlutusData(data.fields[2] as Constr<Data>),\n        totalLiquidity: data.fields[3] as bigint,\n        reserveA: data.fields[4] as bigint,\n        reserveB: data.fields[5] as bigint,\n        baseFee: {\n          feeANumerator: data.fields[6] as bigint,\n          feeBNumerator: data.fields[7] as bigint\n        },\n        feeSharingNumerator: feeSharingNumerator,\n        allowDynamicFee: allowDynamicFee\n      };\n    }\n  }\n}\n","import {\n  BlockFrostAPI,\n  BlockfrostServerError,\n} from \"@blockfrost/blockfrost-js\";\nimport { PaginationOptions } from \"@blockfrost/blockfrost-js/lib/types\";\nimport invariant from \"@minswap/tiny-invariant\";\nimport Big from \"big.js\";\n\nimport { Asset } from \"./types/asset\";\nimport {\n  DexV1Constant,\n  DexV2Constant,\n  StableswapConstant,\n} from \"./types/constants\";\nimport { FactoryV2 } from \"./types/factory\";\nimport { NetworkId } from \"./types/network\";\nimport { PoolV1, PoolV2, StablePool } from \"./types/pool\";\nimport {\n  checkValidPoolOutput,\n  isValidPoolOutput,\n  normalizeAssets,\n} from \"./types/pool.internal\";\nimport { StringUtils } from \"./types/string\";\nimport { TxHistory } from \"./types/tx.internal\";\nimport { getScriptHashFromAddress } from \"./utils/address-utils.internal\";\n\nexport type BlockfrostAdapterOptions = {\n  networkId: NetworkId;\n  blockFrost: BlockFrostAPI;\n};\n\nexport type GetPoolsParams = Omit<PaginationOptions, \"page\"> & {\n  page: number;\n};\n\nexport type GetPoolByIdParams = {\n  id: string;\n};\n\nexport type GetPoolPriceParams = {\n  pool: PoolV1.State;\n  decimalsA?: number;\n  decimalsB?: number;\n};\n\nexport type GetV2PoolPriceParams = {\n  pool: PoolV2.State;\n  decimalsA?: number;\n  decimalsB?: number;\n};\n\nexport type GetPoolHistoryParams = PaginationOptions & {\n  id: string;\n};\n\nexport type GetPoolInTxParams = {\n  txHash: string;\n};\n\nexport type GetStablePoolInTxParams = {\n  networkId: NetworkId;\n  txHash: string;\n};\n\nexport class BlockfrostAdapter {\n  private readonly api: BlockFrostAPI;\n  private readonly networkId: NetworkId;\n\n  constructor({ networkId, blockFrost }: BlockfrostAdapterOptions) {\n    this.networkId = networkId;\n    this.api = blockFrost;\n  }\n\n  /**\n   * @returns The latest pools or empty array if current page is after last page\n   */\n  public async getV1Pools({\n    page,\n    count = 100,\n    order = \"asc\",\n  }: GetPoolsParams): Promise<PoolV1.State[]> {\n    const utxos = await this.api.addressesUtxos(\n      DexV1Constant.POOL_SCRIPT_HASH,\n      {\n        count,\n        order,\n        page,\n      }\n    );\n    return utxos\n      .filter((utxo) =>\n        isValidPoolOutput(utxo.address, utxo.amount, utxo.data_hash)\n      )\n      .map((utxo) => {\n        invariant(\n          utxo.data_hash,\n          `expect pool to have datum hash, got ${utxo.data_hash}`\n        );\n        return new PoolV1.State(\n          utxo.address,\n          { txHash: utxo.tx_hash, index: utxo.output_index },\n          utxo.amount,\n          utxo.data_hash\n        );\n      });\n  }\n\n  /**\n   * Get a specific pool by its ID.\n   * @param {Object} params - The parameters.\n   * @param {string} params.pool - The pool ID. This is the asset name of a pool's NFT and LP tokens. It can also be acquired by calling pool.id.\n   * @returns {PoolV1.State | null} - Returns the pool or null if not found.\n   */\n  public async getV1PoolById({\n    id,\n  }: GetPoolByIdParams): Promise<PoolV1.State | null> {\n    const nft = `${DexV1Constant.POOL_NFT_POLICY_ID}${id}`;\n    const nftTxs = await this.api.assetsTransactions(nft, {\n      count: 1,\n      page: 1,\n      order: \"desc\",\n    });\n    if (nftTxs.length === 0) {\n      return null;\n    }\n    return this.getV1PoolInTx({ txHash: nftTxs[0].tx_hash });\n  }\n\n  public async getV1PoolHistory({\n    id,\n    page = 1,\n    count = 100,\n    order = \"desc\",\n  }: GetPoolHistoryParams): Promise<TxHistory[]> {\n    const nft = `${DexV1Constant.POOL_NFT_POLICY_ID}${id}`;\n    const nftTxs = await this.api.assetsTransactions(nft, {\n      count,\n      page,\n      order,\n    });\n    return nftTxs.map(\n      (tx): TxHistory => ({\n        txHash: tx.tx_hash,\n        txIndex: tx.tx_index,\n        blockHeight: tx.block_height,\n        time: new Date(Number(tx.block_time) * 1000),\n      })\n    );\n  }\n\n  /**\n   * Get pool state in a transaction.\n   * @param {Object} params - The parameters.\n   * @param {string} params.txHash - The transaction hash containing pool output. One of the way to acquire is by calling getPoolHistory.\n   * @returns {PoolV1.State} - Returns the pool state or null if the transaction doesn't contain pool.\n   */\n  public async getV1PoolInTx({\n    txHash,\n  }: GetPoolInTxParams): Promise<PoolV1.State | null> {\n    const poolTx = await this.api.txsUtxos(txHash);\n    const poolUtxo = poolTx.outputs.find(\n      (o) =>\n        getScriptHashFromAddress(o.address) === DexV1Constant.POOL_SCRIPT_HASH\n    );\n    if (!poolUtxo) {\n      return null;\n    }\n    checkValidPoolOutput(poolUtxo.address, poolUtxo.amount, poolUtxo.data_hash);\n    invariant(\n      poolUtxo.data_hash,\n      `expect pool to have datum hash, got ${poolUtxo.data_hash}`\n    );\n    return new PoolV1.State(\n      poolUtxo.address,\n      { txHash: txHash, index: poolUtxo.output_index },\n      poolUtxo.amount,\n      poolUtxo.data_hash\n    );\n  }\n\n  public async getAssetDecimals(asset: string): Promise<number> {\n    if (asset === \"lovelace\") {\n      return 6;\n    }\n    try {\n      const assetAInfo = await this.api.assetsById(asset);\n      return assetAInfo.metadata?.decimals ?? 0;\n    } catch (err) {\n      if (err instanceof BlockfrostServerError && err.status_code === 404) {\n        return 0;\n      }\n      throw err;\n    }\n  }\n\n  /**\n   * Get pool price.\n   * @param {Object} params - The parameters to calculate pool price.\n   * @param {string} params.pool - The pool we want to get price.\n   * @param {string} [params.decimalsA] - The decimals of assetA in pool, if undefined then query from Blockfrost.\n   * @param {string} [params.decimalsB] - The decimals of assetB in pool, if undefined then query from Blockfrost.\n   * @returns {[string, string]} - Returns a pair of asset A/B price and B/A price, adjusted to decimals.\n   */\n  public async getV1PoolPrice({\n    pool,\n    decimalsA,\n    decimalsB,\n  }: GetPoolPriceParams): Promise<[Big, Big]> {\n    if (decimalsA === undefined) {\n      decimalsA = await this.getAssetDecimals(pool.assetA);\n    }\n    if (decimalsB === undefined) {\n      decimalsB = await this.getAssetDecimals(pool.assetB);\n    }\n    const adjustedReserveA = Big(pool.reserveA.toString()).div(\n      Big(10).pow(decimalsA)\n    );\n    const adjustedReserveB = Big(pool.reserveB.toString()).div(\n      Big(10).pow(decimalsB)\n    );\n    const priceAB = adjustedReserveA.div(adjustedReserveB);\n    const priceBA = adjustedReserveB.div(adjustedReserveA);\n    return [priceAB, priceBA];\n  }\n\n  public async getDatumByDatumHash(datumHash: string): Promise<string> {\n    const scriptsDatum = await this.api.scriptsDatumCbor(datumHash);\n    return scriptsDatum.cbor;\n  }\n\n  public async getAllV2Pools(): Promise<{\n    pools: PoolV2.State[];\n    errors: unknown[];\n  }> {\n    const v2Config = DexV2Constant.CONFIG[this.networkId];\n    const utxos = await this.api.addressesUtxosAssetAll(\n      v2Config.poolScriptHashBech32,\n      v2Config.poolAuthenAsset\n    );\n\n    const pools: PoolV2.State[] = [];\n    const errors: unknown[] = [];\n    for (const utxo of utxos) {\n      try {\n        if (!utxo.inline_datum) {\n          throw new Error(`Cannot find datum of Pool V2, tx: ${utxo.tx_hash}`);\n        }\n        const pool = new PoolV2.State(\n          this.networkId,\n          utxo.address,\n          { txHash: utxo.tx_hash, index: utxo.output_index },\n          utxo.amount,\n          utxo.inline_datum\n        );\n        pools.push(pool);\n      } catch (err) {\n        errors.push(err);\n      }\n    }\n    return {\n      pools: pools,\n      errors: errors,\n    };\n  }\n\n  public async getV2Pools({\n    page,\n    count = 100,\n    order = \"asc\",\n  }: GetPoolsParams): Promise<{\n    pools: PoolV2.State[];\n    errors: unknown[];\n  }> {\n    const v2Config = DexV2Constant.CONFIG[this.networkId];\n    const utxos = await this.api.addressesUtxosAsset(\n      v2Config.poolScriptHashBech32,\n      v2Config.poolAuthenAsset,\n      {\n        count,\n        order,\n        page,\n      }\n    );\n\n    const pools: PoolV2.State[] = [];\n    const errors: unknown[] = [];\n    for (const utxo of utxos) {\n      try {\n        if (!utxo.inline_datum) {\n          throw new Error(`Cannot find datum of Pool V2, tx: ${utxo.tx_hash}`);\n        }\n        const pool = new PoolV2.State(\n          this.networkId,\n          utxo.address,\n          { txHash: utxo.tx_hash, index: utxo.output_index },\n          utxo.amount,\n          utxo.inline_datum\n        );\n        pools.push(pool);\n      } catch (err) {\n        errors.push(err);\n      }\n    }\n    return {\n      pools: pools,\n      errors: errors,\n    };\n  }\n\n  public async getV2PoolByPair(\n    assetA: Asset,\n    assetB: Asset\n  ): Promise<PoolV2.State | null> {\n    const [normalizedAssetA, normalizedAssetB] = normalizeAssets(\n      Asset.toString(assetA),\n      Asset.toString(assetB)\n    );\n    const { pools: allPools } = await this.getAllV2Pools();\n    return (\n      allPools.find(\n        (pool) =>\n          pool.assetA === normalizedAssetA && pool.assetB === normalizedAssetB\n      ) ?? null\n    );\n  }\n\n  public async getV2PoolByLp(lpAsset: Asset): Promise<PoolV2.State | null> {\n    const { pools: allPools } = await this.getAllV2Pools();\n    return (\n      allPools.find((pool) => Asset.compare(pool.lpAsset, lpAsset) === 0) ??\n      null\n    );\n  }\n\n  /**\n   * Get pool price.\n   * @param {Object} params - The parameters to calculate pool price.\n   * @param {string} params.pool - The pool we want to get price.\n   * @param {string} [params.decimalsA] - The decimals of assetA in pool, if undefined then query from Blockfrost.\n   * @param {string} [params.decimalsB] - The decimals of assetB in pool, if undefined then query from Blockfrost.\n   * @returns {[string, string]} - Returns a pair of asset A/B price and B/A price, adjusted to decimals.\n   */\n  public async getV2PoolPrice({\n    pool,\n    decimalsA,\n    decimalsB,\n  }: GetV2PoolPriceParams): Promise<[Big, Big]> {\n    if (decimalsA === undefined) {\n      decimalsA = await this.getAssetDecimals(pool.assetA);\n    }\n    if (decimalsB === undefined) {\n      decimalsB = await this.getAssetDecimals(pool.assetB);\n    }\n    const adjustedReserveA = Big(pool.reserveA.toString()).div(\n      Big(10).pow(decimalsA)\n    );\n    const adjustedReserveB = Big(pool.reserveB.toString()).div(\n      Big(10).pow(decimalsB)\n    );\n    const priceAB = adjustedReserveA.div(adjustedReserveB);\n    const priceBA = adjustedReserveB.div(adjustedReserveA);\n    return [priceAB, priceBA];\n  }\n\n  public async getAllStablePools(): Promise<{\n    pools: StablePool.State[];\n    errors: unknown[];\n  }> {\n    const poolAddresses = StableswapConstant.CONFIG[this.networkId].map(\n      (cfg) => cfg.poolAddress\n    );\n    const pools: StablePool.State[] = [];\n    const errors: unknown[] = [];\n    for (const poolAddr of poolAddresses) {\n      const utxos = await this.api.addressesUtxosAll(poolAddr);\n      try {\n        for (const utxo of utxos) {\n          let datum: string;\n          if (utxo.inline_datum) {\n            datum = utxo.inline_datum;\n          } else if (utxo.data_hash) {\n            datum = await this.getDatumByDatumHash(utxo.data_hash);\n          } else {\n            throw new Error(\"Cannot find datum of Stable Pool\");\n          }\n          const pool = new StablePool.State(\n            this.networkId,\n            utxo.address,\n            { txHash: utxo.tx_hash, index: utxo.output_index },\n            utxo.amount,\n            datum\n          );\n          pools.push(pool);\n        }\n      } catch (err) {\n        errors.push(err);\n      }\n    }\n\n    return {\n      pools: pools,\n      errors: errors,\n    };\n  }\n\n  public async getStablePoolByNFT(\n    nft: Asset\n  ): Promise<StablePool.State | null> {\n    const poolAddress = StableswapConstant.CONFIG[this.networkId].find(\n      (cfg) => cfg.nftAsset === Asset.toString(nft)\n    )?.poolAddress;\n    if (!poolAddress) {\n      throw new Error(\n        `Cannot find Stable Pool having NFT ${Asset.toString(nft)}`\n      );\n    }\n    const utxos = await this.api.addressesUtxosAssetAll(\n      poolAddress,\n      Asset.toString(nft)\n    );\n    for (const utxo of utxos) {\n      let datum: string;\n      if (utxo.inline_datum) {\n        datum = utxo.inline_datum;\n      } else if (utxo.data_hash) {\n        datum = await this.getDatumByDatumHash(utxo.data_hash);\n      } else {\n        throw new Error(\"Cannot find datum of Stable Pool\");\n      }\n      const pool = new StablePool.State(\n        this.networkId,\n        utxo.address,\n        { txHash: utxo.tx_hash, index: utxo.output_index },\n        utxo.amount,\n        datum\n      );\n      return pool;\n    }\n\n    return null;\n  }\n\n  public async getAllFactoriesV2(): Promise<{\n    factories: FactoryV2.State[];\n    errors: unknown[];\n  }> {\n    const v2Config = DexV2Constant.CONFIG[this.networkId];\n    const utxos = await this.api.addressesUtxosAssetAll(\n      v2Config.factoryScriptHashBech32,\n      v2Config.factoryAsset\n    );\n\n    const factories: FactoryV2.State[] = [];\n    const errors: unknown[] = [];\n    for (const utxo of utxos) {\n      try {\n        if (!utxo.inline_datum) {\n          throw new Error(\n            `Cannot find datum of Factory V2, tx: ${utxo.tx_hash}`\n          );\n        }\n        const factory = new FactoryV2.State(\n          this.networkId,\n          utxo.address,\n          { txHash: utxo.tx_hash, index: utxo.output_index },\n          utxo.amount,\n          utxo.inline_datum\n        );\n        factories.push(factory);\n      } catch (err) {\n        errors.push(err);\n      }\n    }\n    return {\n      factories: factories,\n      errors: errors,\n    };\n  }\n\n  public async getFactoryV2ByPair(\n    assetA: Asset,\n    assetB: Asset\n  ): Promise<FactoryV2.State | null> {\n    const factoryIdent = PoolV2.computeLPAssetName(assetA, assetB);\n    const { factories: allFactories } = await this.getAllFactoriesV2();\n    for (const factory of allFactories) {\n      if (\n        StringUtils.compare(factory.head, factoryIdent) < 0 &&\n        StringUtils.compare(factoryIdent, factory.tail) < 0\n      ) {\n        return factory;\n      }\n    }\n\n    return null;\n  }\n}\n","import { Address, Constr, Data } from \"lucid-cardano\";\n\nimport { AddressPlutusData } from \"./address.internal\";\nimport { Asset } from \"./asset\";\nimport { NetworkId } from \"./network\";\n\nexport namespace OrderV1 {\n  export enum StepType {\n    SWAP_EXACT_IN = 0,\n    SWAP_EXACT_OUT,\n    DEPOSIT,\n    WITHDRAW,\n    ZAP_IN,\n  }\n\n  export type SwapExactIn = {\n    type: StepType.SWAP_EXACT_IN;\n    desiredAsset: Asset;\n    minimumReceived: bigint;\n  };\n\n  export type SwapExactOut = {\n    type: StepType.SWAP_EXACT_OUT;\n    desiredAsset: Asset;\n    expectedReceived: bigint;\n  };\n\n  export type Deposit = {\n    type: StepType.DEPOSIT;\n    minimumLP: bigint;\n  };\n\n  export type Withdraw = {\n    type: StepType.WITHDRAW;\n    minimumAssetA: bigint;\n    minimumAssetB: bigint;\n  };\n\n  export type ZapIn = {\n    type: StepType.ZAP_IN;\n    desiredAsset: Asset;\n    minimumLP: bigint;\n  };\n\n  export type Step = SwapExactIn | SwapExactOut | Deposit | Withdraw | ZapIn;\n\n  export type Datum = {\n    sender: Address;\n    receiver: Address;\n    receiverDatumHash?: string;\n    step: Step;\n    batcherFee: bigint;\n    depositADA: bigint;\n  };\n\n  export namespace Datum {\n    export function toPlutusData(datum: Datum): Constr<Data> {\n      const {\n        sender,\n        receiver,\n        receiverDatumHash,\n        step,\n        batcherFee,\n        depositADA,\n      } = datum;\n      const senderConstr = AddressPlutusData.toPlutusData(sender);\n      const receiverConstr = AddressPlutusData.toPlutusData(receiver);\n      const receiverDatumHashConstr = receiverDatumHash\n        ? new Constr(0, [receiverDatumHash])\n        : new Constr(1, []);\n      let datumConstr: Constr<Data>;\n      switch (step.type) {\n        case StepType.SWAP_EXACT_IN: {\n          datumConstr = new Constr(0, [\n            senderConstr,\n            receiverConstr,\n            receiverDatumHashConstr,\n            new Constr(StepType.SWAP_EXACT_IN, [\n              Asset.toPlutusData(step.desiredAsset),\n              step.minimumReceived,\n            ]),\n            batcherFee,\n            depositADA,\n          ]);\n          break;\n        }\n        case StepType.SWAP_EXACT_OUT: {\n          datumConstr = new Constr(0, [\n            senderConstr,\n            receiverConstr,\n            receiverDatumHashConstr,\n            new Constr(StepType.SWAP_EXACT_OUT, [\n              Asset.toPlutusData(step.desiredAsset),\n              step.expectedReceived,\n            ]),\n            batcherFee,\n            depositADA,\n          ]);\n          break;\n        }\n        case StepType.DEPOSIT: {\n          datumConstr = new Constr(0, [\n            senderConstr,\n            receiverConstr,\n            receiverDatumHashConstr,\n            new Constr(StepType.DEPOSIT, [step.minimumLP]),\n            batcherFee,\n            depositADA,\n          ]);\n          break;\n        }\n        case StepType.WITHDRAW: {\n          datumConstr = new Constr(0, [\n            senderConstr,\n            receiverConstr,\n            receiverDatumHashConstr,\n            new Constr(StepType.WITHDRAW, [\n              step.minimumAssetA,\n              step.minimumAssetB,\n            ]),\n            batcherFee,\n            depositADA,\n          ]);\n          break;\n        }\n        case StepType.ZAP_IN: {\n          datumConstr = new Constr(0, [\n            senderConstr,\n            receiverConstr,\n            receiverDatumHashConstr,\n            new Constr(StepType.ZAP_IN, [\n              Asset.toPlutusData(step.desiredAsset),\n              step.minimumLP,\n            ]),\n            batcherFee,\n            depositADA,\n          ]);\n          break;\n        }\n      }\n\n      return datumConstr;\n    }\n\n    export function fromPlutusData(\n      networkId: NetworkId,\n      data: Constr<Data>\n    ): Datum {\n      if (data.index !== 0) {\n        throw new Error(\n          `Index of Order Datum must be 0, actual: ${data.index}`\n        );\n      }\n      const sender = AddressPlutusData.fromPlutusData(\n        networkId,\n        data.fields[0] as Constr<Data>\n      );\n      const receiver = AddressPlutusData.fromPlutusData(\n        networkId,\n        data.fields[1] as Constr<Data>\n      );\n      let receiverDatumHash: string | undefined = undefined;\n      const maybeReceiverDatumHash = data.fields[2] as Constr<Data>;\n      switch (maybeReceiverDatumHash.index) {\n        case 0: {\n          receiverDatumHash = maybeReceiverDatumHash.fields[0] as string;\n          break;\n        }\n        case 1: {\n          receiverDatumHash = undefined;\n          break;\n        }\n        default: {\n          throw new Error(\n            `Index of Receiver Datum Hash must be 0 or 1, actual: ${maybeReceiverDatumHash.index}`\n          );\n        }\n      }\n      let step: Step;\n      const orderStepConstr = data.fields[3] as Constr<Data>;\n      switch (orderStepConstr.index) {\n        case StepType.SWAP_EXACT_IN: {\n          step = {\n            type: StepType.SWAP_EXACT_IN,\n            desiredAsset: Asset.fromPlutusData(\n              orderStepConstr.fields[0] as Constr<Data>\n            ),\n            minimumReceived: orderStepConstr.fields[1] as bigint,\n          };\n          break;\n        }\n        case StepType.SWAP_EXACT_OUT: {\n          step = {\n            type: StepType.SWAP_EXACT_OUT,\n            desiredAsset: Asset.fromPlutusData(\n              orderStepConstr.fields[0] as Constr<Data>\n            ),\n            expectedReceived: orderStepConstr.fields[1] as bigint,\n          };\n          break;\n        }\n        case StepType.DEPOSIT: {\n          step = {\n            type: StepType.DEPOSIT,\n            minimumLP: orderStepConstr.fields[0] as bigint,\n          };\n          break;\n        }\n        case StepType.WITHDRAW: {\n          step = {\n            type: StepType.WITHDRAW,\n            minimumAssetA: orderStepConstr.fields[0] as bigint,\n            minimumAssetB: orderStepConstr.fields[1] as bigint,\n          };\n          break;\n        }\n        case StepType.ZAP_IN: {\n          step = {\n            type: StepType.ZAP_IN,\n            desiredAsset: Asset.fromPlutusData(\n              orderStepConstr.fields[0] as Constr<Data>\n            ),\n            minimumLP: orderStepConstr.fields[1] as bigint,\n          };\n          break;\n        }\n        default: {\n          throw new Error(\n            `Index of Order Step must be in 0-4, actual: ${orderStepConstr.index}`\n          );\n        }\n      }\n\n      const batcherFee = data.fields[4] as bigint;\n      const depositADA = data.fields[5] as bigint;\n      return {\n        sender: sender,\n        receiver: receiver,\n        receiverDatumHash: receiverDatumHash,\n        step: step,\n        batcherFee: batcherFee,\n        depositADA: depositADA,\n      };\n    }\n  }\n\n  export enum Redeemer {\n    APPLY_ORDER = 0,\n    CANCEL_ORDER,\n  }\n}\n\nexport namespace StableOrder {\n  export enum StepType {\n    SWAP = 0,\n    DEPOSIT,\n    WITHDRAW,\n    WITHDRAW_IMBALANCE,\n    ZAP_OUT,\n  }\n\n  export type SwapStep = {\n    type: StepType.SWAP;\n    assetInIndex: bigint;\n    assetOutIndex: bigint;\n    minimumAssetOut: bigint;\n  };\n\n  export type DepositStep = {\n    type: StepType.DEPOSIT;\n    minimumLP: bigint;\n  };\n\n  export type WithdrawStep = {\n    type: StepType.WITHDRAW;\n    minimumAmounts: bigint[];\n  };\n\n  export type WithdrawImbalanceStep = {\n    type: StepType.WITHDRAW_IMBALANCE;\n    withdrawAmounts: bigint[];\n  };\n\n  export type ZapOutStep = {\n    type: StepType.ZAP_OUT;\n    assetOutIndex: bigint;\n    minimumAssetOut: bigint;\n  };\n\n  export type Step =\n    | SwapStep\n    | DepositStep\n    | WithdrawStep\n    | WithdrawImbalanceStep\n    | ZapOutStep;\n\n  export type Datum = {\n    sender: Address;\n    receiver: Address;\n    receiverDatumHash?: string;\n    step: Step;\n    batcherFee: bigint;\n    depositADA: bigint;\n  };\n\n  export namespace Datum {\n    export function toPlutusData(datum: Datum): Constr<Data> {\n      const {\n        sender,\n        receiver,\n        receiverDatumHash,\n        step,\n        batcherFee,\n        depositADA,\n      } = datum;\n      const senderConstr = AddressPlutusData.toPlutusData(sender);\n      const receiverConstr = AddressPlutusData.toPlutusData(receiver);\n      const receiverDatumHashConstr = receiverDatumHash\n        ? new Constr(0, [receiverDatumHash])\n        : new Constr(1, []);\n      let stepConstr: Constr<Data>;\n      switch (step.type) {\n        case StepType.SWAP: {\n          stepConstr = new Constr(StepType.SWAP, [\n            step.assetInIndex,\n            step.assetOutIndex,\n            step.minimumAssetOut,\n          ]);\n          break;\n        }\n        case StepType.DEPOSIT: {\n          stepConstr = new Constr(StepType.DEPOSIT, [step.minimumLP]);\n          break;\n        }\n        case StepType.WITHDRAW: {\n          stepConstr = new Constr(StepType.WITHDRAW, [step.minimumAmounts]);\n          break;\n        }\n        case StepType.WITHDRAW_IMBALANCE: {\n          stepConstr = new Constr(StepType.WITHDRAW_IMBALANCE, [\n            step.withdrawAmounts,\n          ]);\n          break;\n        }\n        case StepType.ZAP_OUT: {\n          stepConstr = new Constr(StepType.ZAP_OUT, [\n            step.assetOutIndex,\n            step.minimumAssetOut,\n          ]);\n          break;\n        }\n      }\n\n      return new Constr(0, [\n        senderConstr,\n        receiverConstr,\n        receiverDatumHashConstr,\n        stepConstr,\n        batcherFee,\n        depositADA,\n      ]);\n    }\n\n    export function fromPlutusData(\n      networkId: NetworkId,\n      data: Constr<Data>\n    ): Datum {\n      if (data.index !== 0) {\n        throw new Error(\n          `Index of Order Datum must be 0, actual: ${data.index}`\n        );\n      }\n      const sender = AddressPlutusData.fromPlutusData(\n        networkId,\n        data.fields[0] as Constr<Data>\n      );\n      const receiver = AddressPlutusData.fromPlutusData(\n        networkId,\n        data.fields[1] as Constr<Data>\n      );\n      let receiverDatumHash: string | undefined = undefined;\n      const maybeReceiverDatumHash = data.fields[2] as Constr<Data>;\n      switch (maybeReceiverDatumHash.index) {\n        case 0: {\n          receiverDatumHash = maybeReceiverDatumHash.fields[0] as string;\n          break;\n        }\n        case 1: {\n          receiverDatumHash = undefined;\n          break;\n        }\n        default: {\n          throw new Error(\n            `Index of Receiver Datum Hash must be 0 or 1, actual: ${maybeReceiverDatumHash.index}`\n          );\n        }\n      }\n      let step: Step;\n      const orderStepConstr = data.fields[3] as Constr<Data>;\n      switch (orderStepConstr.index) {\n        case StepType.SWAP: {\n          step = {\n            type: StepType.SWAP,\n            assetInIndex: orderStepConstr.fields[0] as bigint,\n            assetOutIndex: orderStepConstr.fields[1] as bigint,\n            minimumAssetOut: orderStepConstr.fields[2] as bigint,\n          };\n          break;\n        }\n        case StepType.DEPOSIT: {\n          step = {\n            type: StepType.DEPOSIT,\n            minimumLP: orderStepConstr.fields[0] as bigint,\n          };\n          break;\n        }\n        case StepType.WITHDRAW: {\n          step = {\n            type: StepType.WITHDRAW,\n            minimumAmounts: orderStepConstr.fields[0] as bigint[],\n          };\n          break;\n        }\n        case StepType.WITHDRAW_IMBALANCE: {\n          step = {\n            type: StepType.WITHDRAW_IMBALANCE,\n            withdrawAmounts: orderStepConstr.fields[0] as bigint[],\n          };\n          break;\n        }\n        case StepType.ZAP_OUT: {\n          step = {\n            type: StepType.ZAP_OUT,\n            assetOutIndex: orderStepConstr.fields[0] as bigint,\n            minimumAssetOut: orderStepConstr.fields[1] as bigint,\n          };\n          break;\n        }\n        default: {\n          throw new Error(\n            `Index of Order Step must be in 0-4, actual: ${orderStepConstr.index}`\n          );\n        }\n      }\n\n      const batcherFee = data.fields[4] as bigint;\n      const depositADA = data.fields[5] as bigint;\n      return {\n        sender: sender,\n        receiver: receiver,\n        receiverDatumHash: receiverDatumHash,\n        step: step,\n        batcherFee: batcherFee,\n        depositADA: depositADA,\n      };\n    }\n  }\n\n  export enum Redeemer {\n    APPLY_ORDER = 0,\n    CANCEL_ORDER,\n  }\n}\n\nexport namespace OrderV2 {\n  export enum AuthorizationMethodType {\n    SIGNATURE = 0,\n    SPEND_SCRIPT,\n    WITHDRAW_SCRIPT,\n    MINT_SCRIPT,\n  }\n\n  export type AuthorizationMethod = {\n    type: AuthorizationMethodType;\n    hash: string;\n  };\n\n  export namespace AuthorizationMethod {\n    export function fromPlutusData(data: Constr<Data>): AuthorizationMethod {\n      let type: AuthorizationMethodType;\n      switch (data.index) {\n        case AuthorizationMethodType.SIGNATURE: {\n          type = AuthorizationMethodType.SIGNATURE;\n          break;\n        }\n        case AuthorizationMethodType.SPEND_SCRIPT: {\n          type = AuthorizationMethodType.SPEND_SCRIPT;\n          break;\n        }\n        case AuthorizationMethodType.WITHDRAW_SCRIPT: {\n          type = AuthorizationMethodType.WITHDRAW_SCRIPT;\n          break;\n        }\n        case AuthorizationMethodType.MINT_SCRIPT: {\n          type = AuthorizationMethodType.MINT_SCRIPT;\n          break;\n        }\n        default: {\n          throw new Error(\n            `Index of AuthorizationMethod must be in 0-3, actual: ${data.index}`\n          );\n        }\n      }\n      return {\n        type: type,\n        hash: data.fields[0] as string,\n      };\n    }\n    export function toPlutusData(method: AuthorizationMethod): Constr<Data> {\n      return new Constr(method.type, [method.hash]);\n    }\n  }\n\n  export enum Direction {\n    B_TO_A = 0,\n    A_TO_B,\n  }\n\n  export namespace Direction {\n    export function fromPlutusData(data: Constr<Data>): Direction {\n      switch (data.index) {\n        case Direction.B_TO_A: {\n          return Direction.B_TO_A;\n        }\n        case Direction.A_TO_B: {\n          return Direction.A_TO_B;\n        }\n        default: {\n          throw new Error(\n            `Index of Direction must be in 0-1, actual: ${data.index}`\n          );\n        }\n      }\n    }\n    export function toPlutusData(direction: Direction): Constr<Data> {\n      return new Constr(direction, []);\n    }\n  }\n\n  export enum Killable {\n    PENDING_ON_FAILED = 0,\n    KILL_ON_FAILED,\n  }\n\n  export namespace Killable {\n    export function fromPlutusData(data: Constr<Data>): Killable {\n      switch (data.index) {\n        case Killable.PENDING_ON_FAILED: {\n          return Killable.PENDING_ON_FAILED;\n        }\n        case Killable.KILL_ON_FAILED: {\n          return Killable.KILL_ON_FAILED;\n        }\n        default: {\n          throw new Error(\n            `Index of Killable must be in 0-1, actual: ${data.index}`\n          );\n        }\n      }\n    }\n    export function toPlutusData(killable: Killable): Constr<Data> {\n      return new Constr(killable, []);\n    }\n  }\n\n  export enum AmountType {\n    SPECIFIC_AMOUNT = 0,\n    ALL,\n  }\n\n  export type DepositAmount =\n    | {\n        type: AmountType.SPECIFIC_AMOUNT;\n        depositAmountA: bigint;\n        depositAmountB: bigint;\n      }\n    | {\n        type: AmountType.ALL;\n        deductedAmountA: bigint;\n        deductedAmountB: bigint;\n      };\n\n  export namespace DepositAmount {\n    export function fromPlutusData(data: Constr<Data>): DepositAmount {\n      switch (data.index) {\n        case AmountType.SPECIFIC_AMOUNT: {\n          return {\n            type: AmountType.SPECIFIC_AMOUNT,\n            depositAmountA: data.fields[0] as bigint,\n            depositAmountB: data.fields[1] as bigint,\n          };\n        }\n        case AmountType.ALL: {\n          return {\n            type: AmountType.ALL,\n            deductedAmountA: data.fields[0] as bigint,\n            deductedAmountB: data.fields[1] as bigint,\n          };\n        }\n        default: {\n          throw new Error(\n            `Index of DepositAmount must be in 0-1, actual: ${data.index}`\n          );\n        }\n      }\n    }\n    export function toPlutusData(amount: DepositAmount): Constr<Data> {\n      switch (amount.type) {\n        case AmountType.SPECIFIC_AMOUNT: {\n          return new Constr(AmountType.SPECIFIC_AMOUNT, [\n            amount.depositAmountA,\n            amount.depositAmountB,\n          ]);\n        }\n        case AmountType.ALL: {\n          return new Constr(AmountType.ALL, [\n            amount.deductedAmountA,\n            amount.deductedAmountB,\n          ]);\n        }\n      }\n    }\n  }\n\n  export type SwapAmount =\n    | {\n        type: AmountType.SPECIFIC_AMOUNT;\n        swapAmount: bigint;\n      }\n    | {\n        type: AmountType.ALL;\n        deductedAmount: bigint;\n      };\n\n  export namespace SwapAmount {\n    export function fromPlutusData(data: Constr<Data>): SwapAmount {\n      switch (data.index) {\n        case AmountType.SPECIFIC_AMOUNT: {\n          return {\n            type: AmountType.SPECIFIC_AMOUNT,\n            swapAmount: data.fields[0] as bigint,\n          };\n        }\n        case AmountType.ALL: {\n          return {\n            type: AmountType.ALL,\n            deductedAmount: data.fields[0] as bigint,\n          };\n        }\n        default: {\n          throw new Error(\n            `Index of SwapAmount must be in 0-1, actual: ${data.index}`\n          );\n        }\n      }\n    }\n    export function toPlutusData(amount: SwapAmount): Constr<Data> {\n      switch (amount.type) {\n        case AmountType.SPECIFIC_AMOUNT: {\n          return new Constr(AmountType.SPECIFIC_AMOUNT, [amount.swapAmount]);\n        }\n        case AmountType.ALL: {\n          return new Constr(AmountType.ALL, [amount.deductedAmount]);\n        }\n      }\n    }\n  }\n\n  export type WithdrawAmount =\n    | {\n        type: AmountType.SPECIFIC_AMOUNT;\n        withdrawalLPAmount: bigint;\n      }\n    | {\n        type: AmountType.ALL;\n        deductedLPAmount: bigint;\n      };\n\n  export namespace WithdrawAmount {\n    export function fromPlutusData(data: Constr<Data>): WithdrawAmount {\n      switch (data.index) {\n        case AmountType.SPECIFIC_AMOUNT: {\n          return {\n            type: AmountType.SPECIFIC_AMOUNT,\n            withdrawalLPAmount: data.fields[0] as bigint,\n          };\n        }\n        case AmountType.ALL: {\n          return {\n            type: AmountType.ALL,\n            deductedLPAmount: data.fields[0] as bigint,\n          };\n        }\n        default: {\n          throw new Error(\n            `Index of WithdrawAmount must be in 0-1, actual: ${data.index}`\n          );\n        }\n      }\n    }\n    export function toPlutusData(amount: WithdrawAmount): Constr<Data> {\n      switch (amount.type) {\n        case AmountType.SPECIFIC_AMOUNT: {\n          return new Constr(AmountType.SPECIFIC_AMOUNT, [\n            amount.withdrawalLPAmount,\n          ]);\n        }\n        case AmountType.ALL: {\n          return new Constr(AmountType.ALL, [amount.deductedLPAmount]);\n        }\n      }\n    }\n  }\n\n  export type Route = {\n    lpAsset: Asset;\n    direction: Direction;\n  };\n\n  export namespace Route {\n    export function fromPlutusData(data: Constr<Data>): Route {\n      if (data.index !== 0) {\n        throw new Error(\n          `Index of Order Route must be 0, actual: ${data.index}`\n        );\n      }\n      return {\n        lpAsset: Asset.fromPlutusData(data.fields[0] as Constr<Data>),\n        direction: Direction.fromPlutusData(data.fields[1] as Constr<Data>),\n      };\n    }\n    export function toPlutusData(route: Route): Constr<Data> {\n      return new Constr(0, [\n        Asset.toPlutusData(route.lpAsset),\n        Direction.toPlutusData(route.direction),\n      ]);\n    }\n  }\n\n  export enum StepType {\n    SWAP_EXACT_IN = 0,\n    STOP,\n    OCO,\n    SWAP_EXACT_OUT,\n    DEPOSIT,\n    WITHDRAW,\n    ZAP_OUT,\n    PARTIAL_SWAP,\n    WITHDRAW_IMBALANCE,\n    SWAP_ROUTING,\n    DONATION,\n  }\n\n  export type SwapExactIn = {\n    type: StepType.SWAP_EXACT_IN;\n    direction: Direction;\n    swapAmount: SwapAmount;\n    minimumReceived: bigint;\n    killable: Killable;\n  };\n\n  export type Stop = {\n    type: StepType.STOP;\n    direction: Direction;\n    swapAmount: SwapAmount;\n    stopReceived: bigint;\n  };\n\n  export type OCO = {\n    type: StepType.OCO;\n    direction: Direction;\n    swapAmount: SwapAmount;\n    minimumReceived: bigint;\n    stopReceived: bigint;\n  };\n\n  export type SwapExactOut = {\n    type: StepType.SWAP_EXACT_OUT;\n    direction: Direction;\n    maximumSwapAmount: SwapAmount;\n    expectedReceived: bigint;\n    killable: Killable;\n  };\n\n  export type Deposit = {\n    type: StepType.DEPOSIT;\n    depositAmount: DepositAmount;\n    minimumLP: bigint;\n    killable: Killable;\n  };\n\n  export type Withdraw = {\n    type: StepType.WITHDRAW;\n    withdrawalAmount: WithdrawAmount;\n    minimumAssetA: bigint;\n    minimumAssetB: bigint;\n    killable: Killable;\n  };\n\n  export type ZapOut = {\n    type: StepType.ZAP_OUT;\n    direction: Direction;\n    withdrawalAmount: WithdrawAmount;\n    minimumReceived: bigint;\n    killable: Killable;\n  };\n\n  export type PartialSwap = {\n    type: StepType.PARTIAL_SWAP;\n    direction: Direction;\n    totalSwapAmount: bigint;\n    ioRatioNumerator: bigint;\n    ioRatioDenominator: bigint;\n    hops: bigint;\n    minimumSwapAmountRequired: bigint;\n    maxBatcherFeeEachTime: bigint;\n  };\n\n  export type WithdrawImbalance = {\n    type: StepType.WITHDRAW_IMBALANCE;\n    withdrawalAmount: WithdrawAmount;\n    ratioAssetA: bigint;\n    ratioAssetB: bigint;\n    minimumAssetA: bigint;\n    killable: Killable;\n  };\n\n  export type SwapRouting = {\n    type: StepType.SWAP_ROUTING;\n    routings: Route[];\n    swapAmount: SwapAmount;\n    minimumReceived: bigint;\n  };\n\n  export type Donation = {\n    type: StepType.DONATION;\n  };\n\n  export type Step =\n    | SwapExactIn\n    | Stop\n    | OCO\n    | SwapExactOut\n    | Deposit\n    | Withdraw\n    | ZapOut\n    | PartialSwap\n    | WithdrawImbalance\n    | SwapRouting\n    | Donation;\n\n  export namespace Step {\n    export function fromPlutusData(data: Constr<Data>): Step {\n      switch (data.index) {\n        case StepType.SWAP_EXACT_IN: {\n          return {\n            type: StepType.SWAP_EXACT_IN,\n            direction: Direction.fromPlutusData(data.fields[0] as Constr<Data>),\n            swapAmount: SwapAmount.fromPlutusData(\n              data.fields[1] as Constr<Data>\n            ),\n            minimumReceived: data.fields[2] as bigint,\n            killable: Killable.fromPlutusData(data.fields[3] as Constr<Data>),\n          };\n        }\n        case StepType.STOP: {\n          return {\n            type: StepType.STOP,\n            direction: Direction.fromPlutusData(data.fields[0] as Constr<Data>),\n            swapAmount: SwapAmount.fromPlutusData(\n              data.fields[1] as Constr<Data>\n            ),\n            stopReceived: data.fields[2] as bigint,\n          };\n        }\n        case StepType.OCO: {\n          return {\n            type: StepType.OCO,\n            direction: Direction.fromPlutusData(data.fields[0] as Constr<Data>),\n            swapAmount: SwapAmount.fromPlutusData(\n              data.fields[1] as Constr<Data>\n            ),\n            minimumReceived: data.fields[2] as bigint,\n            stopReceived: data.fields[3] as bigint,\n          };\n        }\n        case StepType.SWAP_EXACT_OUT: {\n          return {\n            type: StepType.SWAP_EXACT_OUT,\n            direction: Direction.fromPlutusData(data.fields[0] as Constr<Data>),\n            maximumSwapAmount: SwapAmount.fromPlutusData(\n              data.fields[1] as Constr<Data>\n            ),\n            expectedReceived: data.fields[2] as bigint,\n            killable: Killable.fromPlutusData(data.fields[3] as Constr<Data>),\n          };\n        }\n        case StepType.DEPOSIT: {\n          return {\n            type: StepType.DEPOSIT,\n            depositAmount: DepositAmount.fromPlutusData(\n              data.fields[0] as Constr<Data>\n            ),\n            minimumLP: data.fields[1] as bigint,\n            killable: Killable.fromPlutusData(data.fields[2] as Constr<Data>),\n          };\n        }\n        case StepType.WITHDRAW: {\n          return {\n            type: StepType.WITHDRAW,\n            withdrawalAmount: WithdrawAmount.fromPlutusData(\n              data.fields[0] as Constr<Data>\n            ),\n            minimumAssetA: data.fields[1] as bigint,\n            minimumAssetB: data.fields[2] as bigint,\n            killable: Killable.fromPlutusData(data.fields[3] as Constr<Data>),\n          };\n        }\n        case StepType.ZAP_OUT: {\n          return {\n            type: StepType.ZAP_OUT,\n            direction: Direction.fromPlutusData(data.fields[0] as Constr<Data>),\n            withdrawalAmount: WithdrawAmount.fromPlutusData(\n              data.fields[1] as Constr<Data>\n            ),\n            minimumReceived: data.fields[2] as bigint,\n            killable: Killable.fromPlutusData(data.fields[3] as Constr<Data>),\n          };\n        }\n        case StepType.PARTIAL_SWAP: {\n          return {\n            type: StepType.PARTIAL_SWAP,\n            direction: Direction.fromPlutusData(data.fields[0] as Constr<Data>),\n            totalSwapAmount: data.fields[1] as bigint,\n            ioRatioNumerator: data.fields[2] as bigint,\n            ioRatioDenominator: data.fields[3] as bigint,\n            hops: data.fields[4] as bigint,\n            minimumSwapAmountRequired: data.fields[5] as bigint,\n            maxBatcherFeeEachTime: data.fields[6] as bigint,\n          };\n        }\n        case StepType.WITHDRAW_IMBALANCE: {\n          return {\n            type: StepType.WITHDRAW_IMBALANCE,\n            withdrawalAmount: WithdrawAmount.fromPlutusData(\n              data.fields[0] as Constr<Data>\n            ),\n            ratioAssetA: data.fields[1] as bigint,\n            ratioAssetB: data.fields[2] as bigint,\n            minimumAssetA: data.fields[3] as bigint,\n            killable: Killable.fromPlutusData(data.fields[4] as Constr<Data>),\n          };\n        }\n        case StepType.SWAP_ROUTING: {\n          return {\n            type: StepType.SWAP_ROUTING,\n            routings: (data.fields[0] as Constr<Data>[]).map(\n              Route.fromPlutusData\n            ),\n            swapAmount: SwapAmount.fromPlutusData(\n              data.fields[1] as Constr<Data>\n            ),\n            minimumReceived: data.fields[2] as bigint,\n          };\n        }\n        case StepType.DONATION: {\n          return {\n            type: StepType.DONATION,\n          };\n        }\n\n        default: {\n          throw new Error(\n            `Index of Step must be in 0-10, actual: ${data.index}`\n          );\n        }\n      }\n    }\n    export function toPlutusData(step: Step): Constr<Data> {\n      switch (step.type) {\n        case StepType.SWAP_EXACT_IN: {\n          return new Constr(step.type, [\n            Direction.toPlutusData(step.direction),\n            SwapAmount.toPlutusData(step.swapAmount),\n            step.minimumReceived,\n            Killable.toPlutusData(step.killable),\n          ]);\n        }\n        case StepType.STOP: {\n          return new Constr(step.type, [\n            Direction.toPlutusData(step.direction),\n            SwapAmount.toPlutusData(step.swapAmount),\n            step.stopReceived,\n          ]);\n        }\n        case StepType.OCO: {\n          return new Constr(step.type, [\n            Direction.toPlutusData(step.direction),\n            SwapAmount.toPlutusData(step.swapAmount),\n            step.minimumReceived,\n            step.stopReceived,\n          ]);\n        }\n        case StepType.SWAP_EXACT_OUT: {\n          return new Constr(step.type, [\n            Direction.toPlutusData(step.direction),\n            SwapAmount.toPlutusData(step.maximumSwapAmount),\n            step.expectedReceived,\n            Killable.toPlutusData(step.killable),\n          ]);\n        }\n        case StepType.DEPOSIT: {\n          return new Constr(step.type, [\n            DepositAmount.toPlutusData(step.depositAmount),\n            step.minimumLP,\n            Killable.toPlutusData(step.killable),\n          ]);\n        }\n        case StepType.WITHDRAW: {\n          return new Constr(step.type, [\n            WithdrawAmount.toPlutusData(step.withdrawalAmount),\n            step.minimumAssetA,\n            step.minimumAssetB,\n            Killable.toPlutusData(step.killable),\n          ]);\n        }\n        case StepType.ZAP_OUT: {\n          return new Constr(step.type, [\n            Direction.toPlutusData(step.direction),\n            WithdrawAmount.toPlutusData(step.withdrawalAmount),\n            step.minimumReceived,\n            Killable.toPlutusData(step.killable),\n          ]);\n        }\n        case StepType.PARTIAL_SWAP: {\n          return new Constr(step.type, [\n            Direction.toPlutusData(step.direction),\n            step.totalSwapAmount,\n            step.ioRatioNumerator,\n            step.ioRatioDenominator,\n            step.hops,\n            step.minimumSwapAmountRequired,\n            step.maxBatcherFeeEachTime,\n          ]);\n        }\n        case StepType.WITHDRAW_IMBALANCE: {\n          return new Constr(step.type, [\n            WithdrawAmount.toPlutusData(step.withdrawalAmount),\n            step.ratioAssetA,\n            step.ratioAssetB,\n            step.minimumAssetA,\n            Killable.toPlutusData(step.killable),\n          ]);\n        }\n        case StepType.SWAP_ROUTING: {\n          return new Constr(step.type, [\n            step.routings.map(Route.toPlutusData),\n            SwapAmount.toPlutusData(step.swapAmount),\n            step.minimumReceived,\n          ]);\n        }\n        case StepType.DONATION: {\n          return new Constr(step.type, []);\n        }\n      }\n    }\n  }\n\n  export type ExpirySetting = {\n    expiredTime: bigint;\n    maxCancellationTip: bigint;\n  };\n\n  export enum ExtraDatumType {\n    NO_DATUM = 0,\n    DATUM_HASH,\n    INLINE_DATUM,\n  }\n\n  export type ExtraDatum =\n    | {\n        type: ExtraDatumType.NO_DATUM;\n      }\n    | {\n        type: ExtraDatumType.DATUM_HASH | ExtraDatumType.INLINE_DATUM;\n        hash: string;\n      };\n\n  export namespace ExtraDatum {\n    export function fromPlutusData(data: Constr<Data>): ExtraDatum {\n      switch (data.index) {\n        case ExtraDatumType.NO_DATUM: {\n          return {\n            type: ExtraDatumType.NO_DATUM,\n          };\n        }\n        case ExtraDatumType.DATUM_HASH: {\n          return {\n            type: ExtraDatumType.DATUM_HASH,\n            hash: data.fields[0] as string,\n          };\n        }\n        case ExtraDatumType.INLINE_DATUM: {\n          return {\n            type: ExtraDatumType.INLINE_DATUM,\n            hash: data.fields[0] as string,\n          };\n        }\n        default: {\n          throw new Error(\n            `Index of ExtraDatum must be in 0-2, actual: ${data.index}`\n          );\n        }\n      }\n    }\n\n    export function toPlutusData(extraDatum: ExtraDatum): Constr<Data> {\n      switch (extraDatum.type) {\n        case ExtraDatumType.NO_DATUM: {\n          return new Constr(extraDatum.type, []);\n        }\n        case ExtraDatumType.DATUM_HASH: {\n          return new Constr(extraDatum.type, [extraDatum.hash]);\n        }\n        case ExtraDatumType.INLINE_DATUM: {\n          return new Constr(extraDatum.type, [extraDatum.hash]);\n        }\n      }\n    }\n  }\n\n  export type Datum = {\n    canceller: AuthorizationMethod;\n    refundReceiver: Address;\n    refundReceiverDatum: ExtraDatum;\n    successReceiver: Address;\n    successReceiverDatum: ExtraDatum;\n    lpAsset: Asset;\n    step: Step;\n    maxBatcherFee: bigint;\n    expiredOptions?: ExpirySetting;\n  };\n\n  export namespace Datum {\n    export function fromPlutusData(\n      networkId: NetworkId,\n      data: Constr<Data>\n    ): Datum {\n      if (data.index !== 0) {\n        throw new Error(\n          `Index of Order Datum must be 0, actual: ${data.index}`\n        );\n      }\n      const maybeExpiry = data.fields[8] as Constr<Data>;\n      let expiry: bigint[] | undefined;\n      switch (maybeExpiry.index) {\n        case 0: {\n          expiry = maybeExpiry.fields as bigint[];\n          if (expiry.length !== 2) {\n            throw new Error(\n              `Order Expiry list must have 2 elements, actual: ${expiry.length}`\n            );\n          }\n          break;\n        }\n        case 1: {\n          expiry = undefined;\n          break;\n        }\n        default: {\n          throw new Error(\n            `Index of Maybe Expiry must be 0 or 1, actual: ${maybeExpiry.index}`\n          );\n        }\n      }\n      return {\n        canceller: AuthorizationMethod.fromPlutusData(\n          data.fields[0] as Constr<Data>\n        ),\n        refundReceiver: AddressPlutusData.fromPlutusData(\n          networkId,\n          data.fields[1] as Constr<Data>\n        ),\n        refundReceiverDatum: ExtraDatum.fromPlutusData(\n          data.fields[2] as Constr<Data>\n        ),\n        successReceiver: AddressPlutusData.fromPlutusData(\n          networkId,\n          data.fields[3] as Constr<Data>\n        ),\n        successReceiverDatum: ExtraDatum.fromPlutusData(\n          data.fields[4] as Constr<Data>\n        ),\n        lpAsset: Asset.fromPlutusData(data.fields[5] as Constr<Data>),\n        step: Step.fromPlutusData(data.fields[6] as Constr<Data>),\n        maxBatcherFee: data.fields[7] as bigint,\n        expiredOptions: expiry\n          ? {\n              expiredTime: expiry[0],\n              maxCancellationTip: expiry[1],\n            }\n          : undefined,\n      };\n    }\n\n    export function toPlutusData(datum: Datum): Constr<Data> {\n      return new Constr(0, [\n        AuthorizationMethod.toPlutusData(datum.canceller),\n        AddressPlutusData.toPlutusData(datum.refundReceiver),\n        ExtraDatum.toPlutusData(datum.refundReceiverDatum),\n        AddressPlutusData.toPlutusData(datum.successReceiver),\n        ExtraDatum.toPlutusData(datum.successReceiverDatum),\n        Asset.toPlutusData(datum.lpAsset),\n        Step.toPlutusData(datum.step),\n        datum.maxBatcherFee,\n        datum.expiredOptions\n          ? new Constr(0, [\n              datum.expiredOptions.expiredTime,\n              datum.expiredOptions.maxCancellationTip,\n            ])\n          : new Constr(1, []),\n      ]);\n    }\n  }\n\n  export enum Redeemer {\n    APPLY_ORDER = 0,\n    CANCEL_ORDER_BY_OWNER,\n    CANCEL_EXPIRED_ORDER_BY_ANYONE,\n  }\n}\n","import invariant from \"@minswap/tiny-invariant\";\n\nexport const MAX_SAFE_INTEGER = BigInt(Number.MAX_SAFE_INTEGER);\n\n/**\n * Computes floor(sqrt(value))\n * @param value the value for which to compute the square root, rounded down\n */\nexport function sqrt(value: bigint): bigint {\n  invariant(value >= 0n, \"NEGATIVE\");\n\n  // rely on built in sqrt if possible\n  if (value < MAX_SAFE_INTEGER) {\n    return BigInt(Math.floor(Math.sqrt(Number(value))));\n  }\n\n  let z: bigint;\n  let x: bigint;\n  z = value;\n  x = value / 2n + 1n;\n  while (x < z) {\n    z = x;\n    x = (value / x + x) / 2n;\n  }\n  return z;\n}\n","import Big from \"big.js\";\n\nimport { OrderV2 } from \"./types/order\";\nimport { PoolV2 } from \"./types/pool\";\nimport { sqrt } from \"./utils/sqrt.internal\";\n\n/**\n * Options to calculate Amount Out & Price Impact while swapping exact in\n * @amountIn The amount that we want to swap from\n * @reserveIn The Reserve of Asset In in Liquidity Pool\n * @reserveOut The Reserve of Asset Out in Liquidity Pool\n */\nexport type CalculateSwapExactInOptions = {\n  amountIn: bigint;\n  reserveIn: bigint;\n  reserveOut: bigint;\n};\n/**\n * Calculate Amount Out & Price Impact while swapping exact in\n * @param options See @CalculateSwapExactInOptions description\n * @returns The amount of the other token that we get from the swap and its price impact\n */\nexport function calculateSwapExactIn(options: CalculateSwapExactInOptions): {\n  amountOut: bigint;\n  priceImpact: Big;\n} {\n  const { amountIn, reserveIn, reserveOut } = options;\n  const amtOutNumerator = amountIn * 997n * reserveOut;\n  const amtOutDenominator = amountIn * 997n + reserveIn * 1000n;\n\n  const priceImpactNumerator =\n    reserveOut * amountIn * amtOutDenominator * 997n -\n    amtOutNumerator * reserveIn * 1000n;\n  const priceImpactDenominator =\n    reserveOut * amountIn * amtOutDenominator * 1000n;\n\n  return {\n    amountOut: amtOutNumerator / amtOutDenominator,\n    priceImpact: new Big(priceImpactNumerator.toString())\n      .mul(new Big(100))\n      .div(new Big(priceImpactDenominator.toString())),\n  };\n}\n\n/**\n * Options to calculate necessary Amount In & Price Impact to cover the @exactAmountOut while swapping exact out\n * @exactAmountOut The exact amount that we want to receive\n * @reserveIn The Reserve of Asset In in Liquidity Pool\n * @reserveOut The Reserve of Asset Out in Liquidity Pool\n */\nexport type CalculateSwapExactOutOptions = {\n  exactAmountOut: bigint;\n  reserveIn: bigint;\n  reserveOut: bigint;\n};\n/**\n * Calculate necessary Amount In & Price Impact to cover the @exactAmountOut while swapping exact out\n * @param options See @CalculateSwapExactOutOptions description\n * @returns The amount needed of the input token for the swap and its price impact\n */\nexport function calculateSwapExactOut(options: CalculateSwapExactOutOptions): {\n  amountIn: bigint;\n  priceImpact: Big;\n} {\n  const { exactAmountOut, reserveIn, reserveOut } = options;\n  const amtInNumerator = reserveIn * exactAmountOut * 1000n;\n  const amtInDenominator = (reserveOut - exactAmountOut) * 997n;\n\n  const priceImpactNumerator =\n    reserveOut * amtInNumerator * 997n -\n    exactAmountOut * amtInDenominator * reserveIn * 1000n;\n  const priceImpactDenominator = reserveOut * amtInNumerator * 1000n;\n\n  return {\n    amountIn: amtInNumerator / amtInDenominator + 1n,\n    priceImpact: new Big(priceImpactNumerator.toString())\n      .mul(new Big(100))\n      .div(new Big(priceImpactDenominator.toString())),\n  };\n}\n\n/**\n * Options to calculate LP Amount while depositing\n * @depositedAmountA Amount of Asset A you want to deposit\n * @depositedAmountB Amount of Asset B you want to deposit\n * @reserveA Reserve of Asset A in Liquidity Pool\n * @reserveB Reserve of Asset B in Liquidity Pool\n * @totalLiquidity Total Circulating of LP Token in Liquidity Pool\n */\nexport type CalculateDepositOptions = {\n  depositedAmountA: bigint;\n  depositedAmountB: bigint;\n  reserveA: bigint;\n  reserveB: bigint;\n  totalLiquidity: bigint;\n};\n\n/**\n * Calculate LP Amount while depositing\n * @param options See @CalculateDepositOptions description\n * @returns The amount needed of Asset A and Asset and LP Token Amount you will receive\n */\nexport function calculateDeposit(options: CalculateDepositOptions): {\n  necessaryAmountA: bigint;\n  necessaryAmountB: bigint;\n  lpAmount: bigint;\n} {\n  const {\n    depositedAmountA,\n    depositedAmountB,\n    reserveA,\n    reserveB,\n    totalLiquidity,\n  } = options;\n  const deltaLiquidityA = (depositedAmountA * totalLiquidity) / reserveA;\n  const deltaLiquidityB = (depositedAmountB * totalLiquidity) / reserveB;\n  let necessaryAmountA, necessaryAmountB, lpAmount: bigint;\n  if (deltaLiquidityA > deltaLiquidityB) {\n    necessaryAmountA = (depositedAmountB * reserveA) / reserveB;\n    necessaryAmountB = depositedAmountB;\n    lpAmount = deltaLiquidityB;\n  } else if (deltaLiquidityA < deltaLiquidityB) {\n    necessaryAmountA = depositedAmountA;\n    necessaryAmountB = (depositedAmountA * reserveB) / reserveA;\n    lpAmount = deltaLiquidityA;\n  } else {\n    necessaryAmountA = depositedAmountA;\n    necessaryAmountB = depositedAmountB;\n    lpAmount = deltaLiquidityA;\n  }\n  return {\n    necessaryAmountA: necessaryAmountA,\n    necessaryAmountB: necessaryAmountB,\n    lpAmount: lpAmount,\n  };\n}\n\n/**\n * Options to calculate amount A and amount B after withdrawing @withdrawalLPAmount out of Liquidity Pool\n * @withdrawalLPAmount LP Token amount you want to withdraw\n * @reserveA Reserve of Asset A in Liquidity Pool\n * @reserveB Reserve of Asset B in Liquidity Pool\n * @totalLiquidity Total Circulating of LP Token in Liquidity Pool\n */\nexport type CalculateWithdrawOptions = {\n  withdrawalLPAmount: bigint;\n  reserveA: bigint;\n  reserveB: bigint;\n  totalLiquidity: bigint;\n};\n\n/**\n * Calculate amount A and amount B after withdrawing @withdrawalLPAmount out of Liquidity Pool\n * @param options See @CalculateWithdrawOptions description\n * @returns amount A and amount B you will receive\n */\nexport function calculateWithdraw(options: CalculateWithdrawOptions): {\n  amountAReceive: bigint;\n  amountBReceive: bigint;\n} {\n  const { withdrawalLPAmount, reserveA, reserveB, totalLiquidity } = options;\n  return {\n    amountAReceive: (withdrawalLPAmount * reserveA) / totalLiquidity,\n    amountBReceive: (withdrawalLPAmount * reserveB) / totalLiquidity,\n  };\n}\n\n/**\n * Options to calculate LP Amount while zapping\n * @amountIn Amount you want to zap\n * @reserveIn Reserve of Asset which you want to zap in Liquidity Pool\n * @reserveOut Reserve of other Asset in Liquidity Pool\n * @totalLiquidity Total Circulating of LP Token in Liquidity Pool\n */\nexport type CalculateZapInOptions = {\n  amountIn: bigint;\n  reserveIn: bigint;\n  reserveOut: bigint;\n  totalLiquidity: bigint;\n};\n\n/**\n * Calculate LP Amount while zapping\n * @param options See @CalculateZapInOptions description\n * @returns Amount of LP Token you will receive\n */\nexport function calculateZapIn(options: CalculateZapInOptions): bigint {\n  const { amountIn, reserveIn, reserveOut, totalLiquidity } = options;\n  const swapAmountIn =\n    (sqrt(\n      1997n ** 2n * reserveIn ** 2n + 4n * 997n * 1000n * amountIn * reserveIn\n    ) -\n      1997n * reserveIn) /\n    (2n * 997n);\n  const swapToAssetOutAmount = calculateSwapExactIn({\n    amountIn: swapAmountIn,\n    reserveIn: reserveIn,\n    reserveOut: reserveOut,\n  }).amountOut;\n  return (\n    (swapToAssetOutAmount * totalLiquidity) /\n    (reserveOut - swapToAssetOutAmount)\n  );\n}\n\ntype Reserves = [bigint, bigint];\ntype Fraction = [bigint, bigint];\n\nexport namespace DexV2Calculation {\n  export type InitialLiquidityOptions = {\n    amountA: bigint;\n    amountB: bigint;\n  };\n\n  export type CalculateAmountOutOptions = {\n    reserveIn: bigint;\n    reserveOut: bigint;\n    amountIn: bigint;\n    tradingFeeNumerator: bigint;\n  };\n\n  export type CalculateAmountOutFractionOptions = {\n    reserveIn: bigint;\n    reserveOut: bigint;\n    amountIn: Fraction;\n    tradingFeeNumerator: bigint;\n  };\n\n  export type CalculateAmountInOptions = {\n    reserveIn: bigint;\n    reserveOut: bigint;\n    amountOut: bigint;\n    tradingFeeNumerator: bigint;\n  };\n\n  export type CalculateMaxInSwapOptions = {\n    reserveIn: bigint;\n    reserveOut: bigint;\n    tradingFeeNumerator: bigint;\n    ioRatio: Fraction;\n  };\n\n  export type CalculateDepositAmountOptions = {\n    amountA: bigint;\n    amountB: bigint;\n    poolInfo: PoolV2.Info;\n  };\n\n  export type CalculateDepositSwapAmountOptions = {\n    amountIn: bigint;\n    amountOut: bigint;\n    reserveIn: bigint;\n    reserveOut: bigint;\n    tradingFeeNumerator: bigint;\n  };\n\n  export type CalculateWithdrawAmountOptions = {\n    datumReserves: Reserves;\n    withdrawalLPAmount: bigint;\n    totalLiquidity: bigint;\n  };\n\n  export type CalculateZapOutAmountOptions = {\n    withdrawalLPAmount: bigint;\n    direction: OrderV2.Direction;\n    poolInfo: PoolV2.Info;\n  };\n\n  export function bigIntPow(x: bigint): bigint {\n    return x * x;\n  }\n\n  export function calculateInitialLiquidity({\n    amountA,\n    amountB,\n  }: InitialLiquidityOptions): bigint {\n    let x = sqrt(amountA * amountB);\n    if (x * x < amountA * amountB) {\n      x += 1n;\n    }\n    return x;\n  }\n\n  /* Functions using for DexV2 properties calculation */\n  export function calculateAmountOut({\n    reserveIn,\n    reserveOut,\n    amountIn,\n    tradingFeeNumerator,\n  }: CalculateAmountOutOptions): bigint {\n    const diff = PoolV2.DEFAULT_TRADING_FEE_DENOMINATOR - tradingFeeNumerator;\n    const inWithFee = diff * amountIn;\n    const numerator = inWithFee * reserveOut;\n    const denominator =\n      PoolV2.DEFAULT_TRADING_FEE_DENOMINATOR * reserveIn + inWithFee;\n    return numerator / denominator;\n  }\n\n  export function calculateAmountOutFraction({\n    reserveIn,\n    reserveOut,\n    amountIn,\n    tradingFeeNumerator,\n  }: CalculateAmountOutFractionOptions): [bigint, bigint] {\n    const [amountInNumerator, amountInDenominator] = amountIn;\n    const diff = PoolV2.DEFAULT_TRADING_FEE_DENOMINATOR - tradingFeeNumerator;\n    const numerator = amountInNumerator * diff * reserveOut;\n    const denominator =\n      PoolV2.DEFAULT_TRADING_FEE_DENOMINATOR * amountInDenominator * reserveIn +\n      amountInNumerator * diff;\n    return [numerator, denominator];\n  }\n\n  export function calculateAmountIn({\n    reserveIn,\n    reserveOut,\n    amountOut,\n    tradingFeeNumerator,\n  }: CalculateAmountInOptions): bigint {\n    if (amountOut >= reserveOut) {\n      throw new Error(\"Amount Out must be less than Reserve Out\");\n    }\n    const diff = PoolV2.DEFAULT_TRADING_FEE_DENOMINATOR - tradingFeeNumerator;\n    const numerator =\n      reserveIn * amountOut * PoolV2.DEFAULT_TRADING_FEE_DENOMINATOR;\n    const denominator = (reserveOut - amountOut) * diff;\n    return numerator / denominator + 1n;\n  }\n\n  export function calculateMaxInSwap({\n    reserveIn,\n    reserveOut,\n    tradingFeeNumerator,\n    ioRatio,\n  }: CalculateMaxInSwapOptions): bigint {\n    const [ioRatioNumerator, ioRatioDenominator] = ioRatio;\n    const diff = PoolV2.DEFAULT_TRADING_FEE_DENOMINATOR - tradingFeeNumerator;\n    const numerator =\n      ioRatioNumerator * diff * reserveOut -\n      ioRatioDenominator * PoolV2.DEFAULT_TRADING_FEE_DENOMINATOR * reserveIn;\n    const denominator = ioRatioDenominator * diff;\n    const maxInSwap = numerator / denominator;\n    return maxInSwap > 0 ? maxInSwap : 0n;\n  }\n\n  export function calculateDepositAmount({\n    amountA,\n    amountB,\n    poolInfo,\n  }: CalculateDepositAmountOptions): bigint {\n    const { datumReserves, totalLiquidity, tradingFee } = poolInfo;\n    const [datumReserveA, datumReserveB] = [...datumReserves];\n    const ratioA = (amountA * totalLiquidity) / datumReserveA;\n    const ratioB = (amountB * totalLiquidity) / datumReserveB;\n    if (ratioA > ratioB) {\n      // Need swap a part of A to B\n      const swapAmountA = calculateDepositSwapAmount({\n        amountIn: amountA,\n        amountOut: amountB,\n        reserveIn: datumReserveA,\n        reserveOut: datumReserveB,\n        tradingFeeNumerator: tradingFee.feeANumerator,\n      });\n      const [swapAmountANumerator, swapAmountADenominator] = swapAmountA;\n      const lpAmount =\n        ((amountA * swapAmountADenominator - swapAmountANumerator) *\n          totalLiquidity) /\n        (datumReserveA * swapAmountADenominator + swapAmountANumerator);\n      return lpAmount;\n    } else if (ratioA < ratioB) {\n      // Need swap a part of B to A\n      const swapAmountB = calculateDepositSwapAmount({\n        amountIn: amountB,\n        amountOut: amountA,\n        reserveIn: datumReserveB,\n        reserveOut: datumReserveA,\n        tradingFeeNumerator: tradingFee.feeBNumerator,\n      });\n      const [swapAmountBNumerator, swapAmountBDenominator] = swapAmountB;\n      const lpAmount =\n        ((amountB * swapAmountBDenominator - swapAmountBNumerator) *\n          totalLiquidity) /\n        (datumReserveB * swapAmountBDenominator + swapAmountBNumerator);\n      return lpAmount;\n    } else {\n      return ratioA;\n    }\n  }\n\n  export function calculateDepositSwapAmount({\n    amountIn,\n    amountOut,\n    reserveIn,\n    reserveOut,\n    tradingFeeNumerator,\n  }: CalculateDepositSwapAmountOptions): Fraction {\n    const x = (amountOut + reserveOut) * reserveIn;\n    const y =\n      4n *\n      (amountOut + reserveOut) *\n      (amountOut * reserveIn * reserveIn - amountIn * reserveIn * reserveOut);\n    const z = 2n * (amountOut + reserveOut);\n    const a =\n      bigIntPow(x) *\n        bigIntPow(\n          2n * PoolV2.DEFAULT_TRADING_FEE_DENOMINATOR - tradingFeeNumerator\n        ) -\n      y *\n        PoolV2.DEFAULT_TRADING_FEE_DENOMINATOR *\n        (PoolV2.DEFAULT_TRADING_FEE_DENOMINATOR - tradingFeeNumerator);\n    const b =\n      (2n * PoolV2.DEFAULT_TRADING_FEE_DENOMINATOR - tradingFeeNumerator) * x;\n    const numerator = sqrt(a) - b;\n    const denominator =\n      z * (PoolV2.DEFAULT_TRADING_FEE_DENOMINATOR - tradingFeeNumerator);\n    return [numerator, denominator];\n  }\n\n  export function calculateWithdrawAmount({\n    withdrawalLPAmount,\n    datumReserves,\n    totalLiquidity,\n  }: CalculateWithdrawAmountOptions): {\n    withdrawalA: bigint;\n    withdrawalB: bigint;\n  } {\n    const [datumReserveA, datumReserveB] = [...datumReserves];\n    const amountA = (withdrawalLPAmount * datumReserveA) / totalLiquidity;\n    const amountB = (withdrawalLPAmount * datumReserveB) / totalLiquidity;\n    return {\n      withdrawalA: amountA,\n      withdrawalB: amountB,\n    };\n  }\n\n  export function calculateZapOutAmount({\n    withdrawalLPAmount,\n    direction,\n    poolInfo,\n  }: CalculateZapOutAmountOptions): bigint {\n    const { datumReserves, totalLiquidity, tradingFee } = poolInfo;\n    const [datumReserveA, datumReserveB] = [...datumReserves];\n    const { withdrawalA, withdrawalB } = calculateWithdrawAmount({\n      withdrawalLPAmount: withdrawalLPAmount,\n      datumReserves: datumReserves,\n      totalLiquidity: totalLiquidity,\n    });\n\n    const reserveAAfterWithdraw = datumReserveA - withdrawalA;\n    const reserveBAfterWithdraw = datumReserveB - withdrawalB;\n    let amountOut = 0n;\n    switch (direction) {\n      case OrderV2.Direction.A_TO_B: {\n        const extraAmountOut = calculateAmountOut({\n          amountIn: withdrawalA,\n          reserveIn: reserveAAfterWithdraw,\n          reserveOut: reserveBAfterWithdraw,\n          tradingFeeNumerator: tradingFee.feeANumerator,\n        });\n        amountOut = withdrawalB + extraAmountOut;\n        return amountOut;\n      }\n      case OrderV2.Direction.B_TO_A: {\n        const extraAmountOut = calculateAmountOut({\n          amountIn: withdrawalB,\n          reserveIn: reserveBAfterWithdraw,\n          reserveOut: reserveAAfterWithdraw,\n          tradingFeeNumerator: tradingFee.feeBNumerator,\n        });\n        amountOut = withdrawalA + extraAmountOut;\n        return amountOut;\n      }\n    }\n  }\n}\n","export type BatcherFeeAssetConfig = {\n  asset: string;\n  maximumAmount: bigint;\n};\n\nexport type BatcherFeeReductionConfig = {\n  minFee: bigint;\n  startTime: Date;\n  endTime?: Date;\n  assets: BatcherFeeAssetConfig[];\n};\n\nexport type BatcherFeeConfig = {\n  standardFee: bigint;\n  reduction: BatcherFeeReductionConfig[];\n};\n\nexport enum DexVersion {\n  DEX_V1 = \"DEX_V1\",\n  DEX_V2 = \"DEX_V2\",\n  STABLESWAP = \"STABLESWAP\",\n}\n","import BigNumber from \"bignumber.js\";\nimport { Assets } from \"lucid-cardano\";\n\nimport { NetworkEnvironment } from \"../types/network\";\nimport {\n  BatcherFeeConfig,\n  BatcherFeeReductionConfig,\n  DexVersion,\n} from \"./types.internal\";\n\nexport const FIXED_BATCHER_FEE = 2_000_000n;\n\nexport function getActiveBatcherFee(\n  networkEnv: NetworkEnvironment,\n  dexVersion: DexVersion\n): BatcherFeeReductionConfig | undefined {\n  const batcherFeeConfig = BATCHER_FEE_CONFIG[networkEnv][dexVersion];\n  if (!batcherFeeConfig) {\n    return undefined;\n  }\n  const currentTime = new Date().getTime();\n  let activeReductionConfig: BatcherFeeReductionConfig | undefined;\n  for (const config of batcherFeeConfig.reduction) {\n    const isActive =\n      config.startTime.getTime() <= currentTime && config.endTime\n        ? currentTime <= config.endTime.getTime()\n        : true;\n    if (isActive) {\n      activeReductionConfig = config;\n    }\n  }\n  return activeReductionConfig;\n}\n\nexport function getReducedBatcherFee(\n  activeReductionConfig: BatcherFeeReductionConfig,\n  reductionAssets: Assets\n): bigint {\n  const totalReductionAmountRatio = new BigNumber(0);\n  const { assets, minFee } = activeReductionConfig;\n  for (const { asset, maximumAmount } of assets) {\n    if (asset in reductionAssets) {\n      const reductionAmount = new BigNumber(\n        reductionAssets[asset].toString()\n      ).div(maximumAmount.toString());\n      totalReductionAmountRatio.plus(reductionAmount);\n    }\n  }\n\n  // Maximum ratio is 1\n  const maximumReductionAmountRatio =\n    totalReductionAmountRatio.isGreaterThanOrEqualTo(new BigNumber(1))\n      ? new BigNumber(1)\n      : totalReductionAmountRatio;\n\n  const maximumReduction = new BigNumber(FIXED_BATCHER_FEE.toString())\n    .minus(minFee.toString())\n    .div(FIXED_BATCHER_FEE.toString())\n    .multipliedBy(100);\n\n  // Apply the ratio to calculate batcher fee reduction\n  const totalReduction = new BigNumber(maximumReduction)\n    .multipliedBy(maximumReductionAmountRatio)\n    .div(100);\n\n  // New batcher fee = (1 - reduction) * DEFAULT BATCHER FEE\n  const finalFee = new BigNumber(1)\n    .minus(totalReduction)\n    .multipliedBy(new BigNumber(FIXED_BATCHER_FEE.toString()))\n    .toFixed(0);\n  return BigInt(finalFee);\n}\n\nexport const BATCHER_FEE_CONFIG: Record<\n  NetworkEnvironment,\n  Record<DexVersion, BatcherFeeConfig>\n> = {\n  [NetworkEnvironment.MAINNET]: {\n    [DexVersion.DEX_V1]: {\n      standardFee: 2_000_000n,\n      reduction: [\n        {\n          minFee: 1_500_000n,\n          startTime: new Date(\"2022-09-14T07:00:00.000Z\"),\n          endTime: undefined,\n          assets: [\n            {\n              asset:\n                \"29d222ce763455e3d7a09a665ce554f00ac89d2e99a1a83d267170c6.4d494e\", // MIN\n              maximumAmount: 50_000_000_000n, // 50K MIN\n            },\n            {\n              asset:\n                \"e4214b7cce62ac6fbba385d164df48e157eae5863521b4b67ca71d86.6aa2153e1ae896a95539c9d62f76cedcdabdcdf144e564b8955f609d660cf6a2\", // ADA-MIN LP\n              maximumAmount: 5_000_000_000n, // 5B ADA-MIN LP\n            },\n          ],\n        },\n      ],\n    },\n    [DexVersion.STABLESWAP]: {\n      standardFee: 2_000_000n,\n      reduction: [\n        {\n          minFee: 1_500_000n,\n          startTime: new Date(\"2022-09-14T07:00:00.000Z\"),\n          endTime: undefined,\n          assets: [\n            {\n              asset:\n                \"29d222ce763455e3d7a09a665ce554f00ac89d2e99a1a83d267170c6.4d494e\", // MIN\n              maximumAmount: 50_000_000_000n, // 50K MIN\n            },\n            {\n              asset:\n                \"e4214b7cce62ac6fbba385d164df48e157eae5863521b4b67ca71d86.6aa2153e1ae896a95539c9d62f76cedcdabdcdf144e564b8955f609d660cf6a2\", // ADA-MIN LP\n              maximumAmount: 5_000_000_000n, // 5B ADA-MIN LP\n            },\n          ],\n        },\n      ],\n    },\n    [DexVersion.DEX_V2]: {\n      standardFee: 1_000_000n,\n      reduction: [\n        {\n          minFee: 750_000n,\n          startTime: new Date(\"2024-07-01T05:00:00.000Z\"),\n          endTime: undefined,\n          assets: [\n            {\n              asset:\n                \"29d222ce763455e3d7a09a665ce554f00ac89d2e99a1a83d267170c6.4d494e\", // MIN\n              maximumAmount: 50_000_000_000n, // 50K MIN\n            },\n            {\n              asset:\n                \"e4214b7cce62ac6fbba385d164df48e157eae5863521b4b67ca71d86.6aa2153e1ae896a95539c9d62f76cedcdabdcdf144e564b8955f609d660cf6a2\", // ADA-MIN LP V1\n              maximumAmount: 5_000_000_000n, // 5B ADA-MIN LP\n            },\n            {\n              asset:\n                \"f5808c2c990d86da54bfc97d89cee6efa20cd8461616359478d96b4c.82e2b1fd27a7712a1a9cf750dfbea1a5778611b20e06dd6a611df7a643f8cb75\", // ADA-MIN LP V2\n              maximumAmount: 5_000_000_000n, // 5B ADA-MIN LP V2\n            },\n          ],\n        },\n      ],\n    },\n  },\n  [NetworkEnvironment.TESTNET_PREPROD]: {\n    [DexVersion.DEX_V1]: {\n      standardFee: 2_000_000n,\n      reduction: [\n        {\n          minFee: 1_500_000n,\n          startTime: new Date(\"2022-09-01T00:00:00.000Z\"),\n          endTime: new Date(\"2024-06-24T00:00:00.000Z\"),\n          assets: [\n            {\n              asset:\n                \"e16c2dc8ae937e8d3790c7fd7168d7b994621ba14ca11415f39fed72.4d494e\", // MIN\n              maximumAmount: 10_000_000n,\n            },\n            {\n              asset:\n                \"e4214b7cce62ac6fbba385d164df48e157eae5863521b4b67ca71d86.3bb0079303c57812462dec9de8fb867cef8fd3768de7f12c77f6f0dd80381d0d\", // ADA-MIN LP\n              maximumAmount: 100_000_000n,\n            },\n          ],\n        },\n        {\n          minFee: 1_500_000n,\n          startTime: new Date(\"2024-06-24T00:00:00.000Z\"),\n          endTime: undefined,\n          assets: [\n            {\n              asset:\n                \"e16c2dc8ae937e8d3790c7fd7168d7b994621ba14ca11415f39fed72.4d494e\", // MIN\n              maximumAmount: 10_000_000n,\n            },\n            {\n              asset:\n                \"e4214b7cce62ac6fbba385d164df48e157eae5863521b4b67ca71d86.3bb0079303c57812462dec9de8fb867cef8fd3768de7f12c77f6f0dd80381d0d\", // ADA-MIN LP\n              maximumAmount: 100_000_000n,\n            },\n            {\n              asset:\n                \"d6aae2059baee188f74917493cf7637e679cd219bdfbbf4dcbeb1d0b.6c3ea488e6ff940bb6fb1b18fd605b5931d9fefde6440117015ba484cf321200\", // ADA-MIN LP V2\n              maximumAmount: 100_000_000n,\n            },\n          ],\n        },\n      ],\n    },\n    [DexVersion.STABLESWAP]: {\n      standardFee: 2_000_000n,\n      reduction: [\n        {\n          minFee: 1_500_000n,\n          startTime: new Date(\"2022-09-01T00:00:00.000Z\"),\n          endTime: new Date(\"2024-06-24T00:00:00.000Z\"),\n          assets: [\n            {\n              asset:\n                \"e16c2dc8ae937e8d3790c7fd7168d7b994621ba14ca11415f39fed72.4d494e\",\n              // MIN\n              maximumAmount: 10_000_000n,\n            },\n            {\n              asset:\n                \"e4214b7cce62ac6fbba385d164df48e157eae5863521b4b67ca71d86.3bb0079303c57812462dec9de8fb867cef8fd3768de7f12c77f6f0dd80381d0d\",\n              // ADA-MIN LP\n              maximumAmount: 100_000_000n,\n            },\n          ],\n        },\n        {\n          minFee: 1_500_000n,\n          startTime: new Date(\"2024-06-24T00:00:00.000Z\"),\n          endTime: undefined,\n          assets: [\n            {\n              asset:\n                \"e16c2dc8ae937e8d3790c7fd7168d7b994621ba14ca11415f39fed72.4d494e\", // MIN\n              maximumAmount: 10_000_000n,\n            },\n            {\n              asset:\n                \"e4214b7cce62ac6fbba385d164df48e157eae5863521b4b67ca71d86.3bb0079303c57812462dec9de8fb867cef8fd3768de7f12c77f6f0dd80381d0d\", // ADA-MIN LP\n              maximumAmount: 100_000_000n,\n            },\n            {\n              asset:\n                \"d6aae2059baee188f74917493cf7637e679cd219bdfbbf4dcbeb1d0b.6c3ea488e6ff940bb6fb1b18fd605b5931d9fefde6440117015ba484cf321200\", // ADA-MIN LP V2\n              maximumAmount: 100_000_000n,\n            },\n          ],\n        },\n      ],\n    },\n    [DexVersion.DEX_V2]: {\n      standardFee: 1_300_000n,\n      reduction: [\n        {\n          minFee: 1_000_000n,\n          startTime: new Date(\"2024-04-23T00:00:00.000Z\"),\n          endTime: new Date(\"2024-06-24T00:00:00.000Z\"),\n          assets: [\n            {\n              asset:\n                \"e16c2dc8ae937e8d3790c7fd7168d7b994621ba14ca11415f39fed72.4d494e\", // MIN\n              maximumAmount: 10_000_000n,\n            },\n            {\n              asset:\n                \"e4214b7cce62ac6fbba385d164df48e157eae5863521b4b67ca71d86.3bb0079303c57812462dec9de8fb867cef8fd3768de7f12c77f6f0dd80381d0d\", // ADA-MIN LP\n              maximumAmount: 100_000_000n,\n            },\n          ],\n        },\n        {\n          minFee: 1_000_000n,\n          startTime: new Date(\"2024-06-24T00:00:00.000Z\"),\n          endTime: undefined,\n          assets: [\n            {\n              asset:\n                \"e16c2dc8ae937e8d3790c7fd7168d7b994621ba14ca11415f39fed72.4d494e\", // MIN\n              maximumAmount: 10_000_000n,\n            },\n            {\n              asset:\n                \"e4214b7cce62ac6fbba385d164df48e157eae5863521b4b67ca71d86.3bb0079303c57812462dec9de8fb867cef8fd3768de7f12c77f6f0dd80381d0d\", // ADA-MIN LP\n              maximumAmount: 100_000_000n,\n            },\n            {\n              asset:\n                \"d6aae2059baee188f74917493cf7637e679cd219bdfbbf4dcbeb1d0b.6c3ea488e6ff940bb6fb1b18fd605b5931d9fefde6440117015ba484cf321200\", // ADA-MIN LP V2\n              maximumAmount: 100_000_000n,\n            },\n          ],\n        },\n      ],\n    },\n  },\n  [NetworkEnvironment.TESTNET_PREVIEW]: {\n    [DexVersion.DEX_V1]: {\n      standardFee: 2_000_000n,\n      reduction: [\n        {\n          minFee: 1_500_000n,\n          startTime: new Date(\"2022-09-01T00:00:00.000Z\"),\n          endTime: undefined,\n          assets: [\n            {\n              asset:\n                \"e16c2dc8ae937e8d3790c7fd7168d7b994621ba14ca11415f39fed72.4d494e\", // MIN\n              maximumAmount: 10_000_000n,\n            },\n            {\n              asset:\n                \"e4214b7cce62ac6fbba385d164df48e157eae5863521b4b67ca71d86.3bb0079303c57812462dec9de8fb867cef8fd3768de7f12c77f6f0dd80381d0d\", // ADA-MIN LP\n              maximumAmount: 100_000_000n,\n            },\n          ],\n        },\n      ],\n    },\n    [DexVersion.STABLESWAP]: {\n      standardFee: 2_000_000n,\n      reduction: [\n        {\n          minFee: 1_500_000n,\n          startTime: new Date(\"2022-09-01T00:00:00.000Z\"),\n          endTime: undefined,\n          assets: [\n            {\n              asset:\n                \"e16c2dc8ae937e8d3790c7fd7168d7b994621ba14ca11415f39fed72.4d494e\", // MIN\n              maximumAmount: 10_000_000n,\n            },\n            {\n              asset:\n                \"e4214b7cce62ac6fbba385d164df48e157eae5863521b4b67ca71d86.3bb0079303c57812462dec9de8fb867cef8fd3768de7f12c77f6f0dd80381d0d\", // ADA-MIN LP\n              maximumAmount: 100_000_000n,\n            },\n          ],\n        },\n      ],\n    },\n    [DexVersion.DEX_V2]: {\n      standardFee: 1_300_000n,\n      reduction: [\n        {\n          minFee: 1_000_000n,\n          startTime: new Date(\"2024-01-01T00:00:00.000Z\"),\n          endTime: undefined,\n          assets: [\n            {\n              asset:\n                \"e16c2dc8ae937e8d3790c7fd7168d7b994621ba14ca11415f39fed72.4d494e\", // MIN\n              maximumAmount: 10_000_000n,\n            },\n            {\n              asset:\n                \"e4214b7cce62ac6fbba385d164df48e157eae5863521b4b67ca71d86.3bb0079303c57812462dec9de8fb867cef8fd3768de7f12c77f6f0dd80381d0d\", // ADA-MIN LP\n              maximumAmount: 100_000_000n,\n            },\n          ],\n        },\n      ],\n    },\n  },\n};\n","import { Assets, UTxO } from \"lucid-cardano\";\n\nimport { NetworkEnvironment } from \"../types/network\";\nimport {\n  FIXED_BATCHER_FEE,\n  getActiveBatcherFee,\n  getReducedBatcherFee,\n} from \"./configs.internal\";\nimport { DexVersion } from \"./types.internal\";\n\nexport function calculateBatcherFee({\n  utxos,\n  orderAssets,\n  dexVersion,\n  networkEnv,\n}: {\n  dexVersion: DexVersion;\n  utxos: UTxO[];\n  orderAssets: Assets;\n  networkEnv: NetworkEnvironment;\n}): {\n  batcherFee: bigint;\n  reductionAssets: Assets;\n} {\n  const reductionAssets: Assets = {};\n  const activeBatcherFeeConfig = getActiveBatcherFee(networkEnv, dexVersion);\n  if (!activeBatcherFeeConfig) {\n    return {\n      batcherFee: FIXED_BATCHER_FEE,\n      reductionAssets,\n    };\n  }\n  const totalAssets: Assets = {};\n  for (const u of utxos) {\n    for (const [asset, amount] of Object.entries(u.assets)) {\n      if (asset in totalAssets) {\n        totalAssets[asset] += amount;\n      } else {\n        totalAssets[asset] = amount;\n      }\n    }\n  }\n  const eligibleReductionAssets: Assets = {};\n  for (const { asset } of activeBatcherFeeConfig.assets) {\n    if (asset in totalAssets) {\n      eligibleReductionAssets[asset] = totalAssets[asset];\n      if (asset in orderAssets) {\n        eligibleReductionAssets[asset] -= orderAssets[asset];\n      }\n    }\n  }\n  return {\n    batcherFee: getReducedBatcherFee(\n      activeBatcherFeeConfig,\n      eligibleReductionAssets\n    ),\n    reductionAssets: reductionAssets,\n  };\n}\n","import { Network } from \"lucid-cardano\";\n\nimport { NetworkEnvironment } from \"../types/network\";\n\nexport function lucidToNetworkEnv(network: Network): NetworkEnvironment {\n  if (network === \"Mainnet\") {\n    return NetworkEnvironment.MAINNET;\n  } else if (network === \"Preprod\") {\n    return NetworkEnvironment.TESTNET_PREPROD;\n  } else if (network === \"Preview\") {\n    return NetworkEnvironment.TESTNET_PREVIEW;\n  }\n  throw new Error(\"Not supported\");\n}\n","import invariant from \"@minswap/tiny-invariant\";\nimport {\n  Address,\n  Assets,\n  Constr,\n  Data,\n  Lucid,\n  SpendingValidator,\n  TxComplete,\n  UTxO,\n} from \"lucid-cardano\";\n\nimport { calculateBatcherFee } from \"./batcher-fee-reduction/calculate\";\nimport { DexVersion } from \"./batcher-fee-reduction/types.internal\";\nimport { Asset } from \"./types/asset\";\nimport {\n  DexV1Constant,\n  FIXED_DEPOSIT_ADA,\n  MetadataMessage,\n} from \"./types/constants\";\nimport { NetworkEnvironment, NetworkId } from \"./types/network\";\nimport { OrderV1 } from \"./types/order\";\nimport { lucidToNetworkEnv } from \"./utils/network.internal\";\n\n/**\n * Common options for build Minswap transaction\n * @sender The owner of this order, it will be used for cancelling this order\n * @availableUtxos Available UTxOs can be used in transaction\n */\ntype CommonOptions = {\n  sender: Address;\n  availableUtxos: UTxO[];\n};\n\n/**\n * Options for building cancel Order\n * @orderTxId Transaction ID which order is created\n * @sender The owner of this order. The @sender must be matched with data in Order's Datum\n */\nexport type BuildCancelOrderOptions = {\n  orderUtxo: UTxO;\n  sender: Address;\n};\n\n/**\n * Options for building Deposit Order\n * @assetA @assetB Define pair which you want to deposit to\n * @amountA @amountB Define amount which you want to deposit to\n * @minimumLPReceived Minimum Received Amount you can accept after order is executed\n */\nexport type BuildDepositTxOptions = CommonOptions & {\n  // sender: Address;\n  assetA: Asset;\n  assetB: Asset;\n  amountA: bigint;\n  amountB: bigint;\n  minimumLPReceived: bigint;\n};\n\n/**\n * Options for building Zap In Order\n * @assetIn Asset you want to Zap\n * @assetOut The remaining asset of Pool which you want to Zap.\n *      For eg, in Pool ADA-MIN, if @assetIn is ADA then @assetOut will be MIN and vice versa\n * @minimumLPReceived Minimum Received Amount you can accept after order is executed\n */\nexport type BuildZapInTxOptions = CommonOptions & {\n  sender: Address;\n  assetIn: Asset;\n  amountIn: bigint;\n  assetOut: Asset;\n  minimumLPReceived: bigint;\n};\n\n/**\n * Options for building Withdrawal Order\n * @lpAsset LP Asset will be withdrawed\n * @lpAmount LP Asset amount will be withdrawed\n * @minimumAssetAReceived Minimum Received of Asset A in the Pool you can accept after order is executed\n * @minimumAssetBReceived Minimum Received of Asset A in the Pool you can accept after order is executed\n */\nexport type BuildWithdrawTxOptions = CommonOptions & {\n  sender: Address;\n  lpAsset: Asset;\n  lpAmount: bigint;\n  minimumAssetAReceived: bigint;\n  minimumAssetBReceived: bigint;\n};\n\n/**\n * Options for building Swap Exact Out Order\n * @assetIn Asset you want to Swap\n * @assetOut Asset you want to receive\n * @maximumAmountIn The maximum Amount of Asset In which will be spent after order is executed\n * @expectedAmountOut The expected Amount of Asset Out you want to receive after order is executed\n */\nexport type BuildSwapExactOutTxOptions = CommonOptions & {\n  sender: Address;\n  assetIn: Asset;\n  assetOut: Asset;\n  maximumAmountIn: bigint;\n  expectedAmountOut: bigint;\n};\n\n/**\n * Options for building Swap Exact In Order\n * @assetIn Asset and its amount you want to Swap\n * @amountIn Amount of Asset In you want to Swap\n * @assetOut Asset and you want to receive\n * @minimumAmountOut The minimum Amount of Asset Out you can accept after order is executed\n * @isLimitOrder Define this order is Limit Order or not\n */\nexport type BuildSwapExactInTxOptions = CommonOptions & {\n  sender: Address;\n  assetIn: Asset;\n  amountIn: bigint;\n  assetOut: Asset;\n  minimumAmountOut: bigint;\n  isLimitOrder: boolean;\n};\n\nexport class Dex {\n  private readonly lucid: Lucid;\n  private readonly networkId: NetworkId;\n  private readonly networkEnv: NetworkEnvironment;\n  private readonly dexVersion = DexVersion.DEX_V1;\n\n  constructor(lucid: Lucid) {\n    this.lucid = lucid;\n    this.networkId =\n      lucid.network === \"Mainnet\" ? NetworkId.MAINNET : NetworkId.TESTNET;\n    this.networkEnv = lucidToNetworkEnv(lucid.network);\n  }\n\n  async buildSwapExactInTx(\n    options: BuildSwapExactInTxOptions\n  ): Promise<TxComplete> {\n    const {\n      sender,\n      assetIn,\n      amountIn,\n      assetOut,\n      minimumAmountOut,\n      isLimitOrder,\n      availableUtxos,\n    } = options;\n    invariant(amountIn > 0n, \"amount in must be positive\");\n    invariant(minimumAmountOut > 0n, \"minimum amount out must be positive\");\n    const orderAssets: Assets = { [Asset.toString(assetIn)]: amountIn };\n    const { batcherFee, reductionAssets } = calculateBatcherFee({\n      utxos: availableUtxos,\n      orderAssets,\n      networkEnv: this.networkEnv,\n      dexVersion: this.dexVersion,\n    });\n    if (orderAssets[\"lovelace\"]) {\n      orderAssets[\"lovelace\"] += FIXED_DEPOSIT_ADA + batcherFee;\n    } else {\n      orderAssets[\"lovelace\"] = FIXED_DEPOSIT_ADA + batcherFee;\n    }\n    const datum: OrderV1.Datum = {\n      sender: sender,\n      receiver: sender,\n      receiverDatumHash: undefined,\n      step: {\n        type: OrderV1.StepType.SWAP_EXACT_IN,\n        desiredAsset: assetOut,\n        minimumReceived: minimumAmountOut,\n      },\n      batcherFee: batcherFee,\n      depositADA: FIXED_DEPOSIT_ADA,\n    };\n    const tx = this.lucid\n      .newTx()\n      .payToContract(\n        DexV1Constant.ORDER_BASE_ADDRESS[this.networkId],\n        Data.to(OrderV1.Datum.toPlutusData(datum)),\n        orderAssets\n      )\n      .payToAddress(sender, reductionAssets)\n      .addSigner(sender);\n    if (isLimitOrder) {\n      tx.attachMetadata(674, {\n        msg: [MetadataMessage.SWAP_EXACT_IN_LIMIT_ORDER],\n      });\n    } else {\n      tx.attachMetadata(674, { msg: [MetadataMessage.SWAP_EXACT_IN_ORDER] });\n    }\n    return await tx.complete();\n  }\n\n  async buildSwapExactOutTx(\n    options: BuildSwapExactOutTxOptions\n  ): Promise<TxComplete> {\n    const {\n      sender,\n      assetIn,\n      assetOut,\n      maximumAmountIn,\n      expectedAmountOut,\n      availableUtxos,\n    } = options;\n    invariant(\n      maximumAmountIn > 0n && expectedAmountOut > 0n,\n      \"amount in and out must be positive\"\n    );\n    const orderAssets: Assets = { [Asset.toString(assetIn)]: maximumAmountIn };\n    const { batcherFee, reductionAssets } = calculateBatcherFee({\n      utxos: availableUtxos,\n      orderAssets,\n      networkEnv: this.networkEnv,\n      dexVersion: this.dexVersion,\n    });\n    if (orderAssets[\"lovelace\"]) {\n      orderAssets[\"lovelace\"] += FIXED_DEPOSIT_ADA + batcherFee;\n    } else {\n      orderAssets[\"lovelace\"] = FIXED_DEPOSIT_ADA + batcherFee;\n    }\n    const datum: OrderV1.Datum = {\n      sender: sender,\n      receiver: sender,\n      receiverDatumHash: undefined,\n      step: {\n        type: OrderV1.StepType.SWAP_EXACT_OUT,\n        desiredAsset: assetOut,\n        expectedReceived: expectedAmountOut,\n      },\n      batcherFee: batcherFee,\n      depositADA: FIXED_DEPOSIT_ADA,\n    };\n\n    return await this.lucid\n      .newTx()\n      .payToContract(\n        DexV1Constant.ORDER_BASE_ADDRESS[this.networkId],\n        Data.to(OrderV1.Datum.toPlutusData(datum)),\n        orderAssets\n      )\n      .payToAddress(sender, reductionAssets)\n      .addSigner(sender)\n      .attachMetadata(674, { msg: [MetadataMessage.SWAP_EXACT_OUT_ORDER] })\n      .complete();\n  }\n\n  async buildWithdrawTx(options: BuildWithdrawTxOptions): Promise<TxComplete> {\n    const {\n      sender,\n      lpAsset,\n      lpAmount,\n      minimumAssetAReceived,\n      minimumAssetBReceived,\n      availableUtxos,\n    } = options;\n    invariant(lpAmount > 0n, \"LP amount must be positive\");\n    invariant(\n      minimumAssetAReceived > 0n && minimumAssetBReceived > 0n,\n      \"minimum asset received must be positive\"\n    );\n    const orderAssets: Assets = { [Asset.toString(lpAsset)]: lpAmount };\n    const { batcherFee, reductionAssets } = calculateBatcherFee({\n      utxos: availableUtxos,\n      orderAssets,\n      networkEnv: this.networkEnv,\n      dexVersion: this.dexVersion,\n    });\n    if (orderAssets[\"lovelace\"]) {\n      orderAssets[\"lovelace\"] += FIXED_DEPOSIT_ADA + batcherFee;\n    } else {\n      orderAssets[\"lovelace\"] = FIXED_DEPOSIT_ADA + batcherFee;\n    }\n    const datum: OrderV1.Datum = {\n      sender: sender,\n      receiver: sender,\n      receiverDatumHash: undefined,\n      step: {\n        type: OrderV1.StepType.WITHDRAW,\n        minimumAssetA: minimumAssetAReceived,\n        minimumAssetB: minimumAssetBReceived,\n      },\n      batcherFee: batcherFee,\n      depositADA: FIXED_DEPOSIT_ADA,\n    };\n    return await this.lucid\n      .newTx()\n      .payToContract(\n        DexV1Constant.ORDER_BASE_ADDRESS[this.networkId],\n        Data.to(OrderV1.Datum.toPlutusData(datum)),\n        orderAssets\n      )\n      .payToAddress(sender, reductionAssets)\n      .addSigner(sender)\n      .attachMetadata(674, { msg: [MetadataMessage.WITHDRAW_ORDER] })\n      .complete();\n  }\n\n  async buildZapInTx(options: BuildZapInTxOptions): Promise<TxComplete> {\n    const {\n      sender,\n      assetIn,\n      amountIn,\n      assetOut,\n      minimumLPReceived,\n      availableUtxos,\n    } = options;\n    invariant(amountIn > 0n, \"amount in must be positive\");\n    invariant(minimumLPReceived > 0n, \"minimum LP received must be positive\");\n    const orderAssets: Assets = { [Asset.toString(assetIn)]: amountIn };\n    const { batcherFee, reductionAssets } = calculateBatcherFee({\n      utxos: availableUtxos,\n      orderAssets,\n      networkEnv: this.networkEnv,\n      dexVersion: this.dexVersion,\n    });\n    if (orderAssets[\"lovelace\"]) {\n      orderAssets[\"lovelace\"] += FIXED_DEPOSIT_ADA + batcherFee;\n    } else {\n      orderAssets[\"lovelace\"] = FIXED_DEPOSIT_ADA + batcherFee;\n    }\n    const datum: OrderV1.Datum = {\n      sender: sender,\n      receiver: sender,\n      receiverDatumHash: undefined,\n      step: {\n        type: OrderV1.StepType.ZAP_IN,\n        desiredAsset: assetOut,\n        minimumLP: minimumLPReceived,\n      },\n      batcherFee: batcherFee,\n      depositADA: FIXED_DEPOSIT_ADA,\n    };\n\n    return await this.lucid\n      .newTx()\n      .payToContract(\n        DexV1Constant.ORDER_BASE_ADDRESS[this.networkId],\n        Data.to(OrderV1.Datum.toPlutusData(datum)),\n        orderAssets\n      )\n      .payToAddress(sender, reductionAssets)\n      .addSigner(sender)\n      .attachMetadata(674, { msg: [MetadataMessage.ZAP_IN_ORDER] })\n      .complete();\n  }\n\n  async buildDepositTx(options: BuildDepositTxOptions): Promise<TxComplete> {\n    const {\n      sender,\n      assetA,\n      assetB,\n      amountA,\n      amountB,\n      minimumLPReceived,\n      availableUtxos,\n    } = options;\n    invariant(amountA > 0n && amountB > 0n, \"amount must be positive\");\n    invariant(minimumLPReceived > 0n, \"minimum LP received must be positive\");\n    const orderAssets = {\n      [Asset.toString(assetA)]: amountA,\n      [Asset.toString(assetB)]: amountB,\n    };\n    const { batcherFee, reductionAssets } = calculateBatcherFee({\n      utxos: availableUtxos,\n      orderAssets,\n      networkEnv: this.networkEnv,\n      dexVersion: this.dexVersion,\n    });\n    if (orderAssets[\"lovelace\"]) {\n      orderAssets[\"lovelace\"] += FIXED_DEPOSIT_ADA + batcherFee;\n    } else {\n      orderAssets[\"lovelace\"] = FIXED_DEPOSIT_ADA + batcherFee;\n    }\n    const datum: OrderV1.Datum = {\n      sender: sender,\n      receiver: sender,\n      receiverDatumHash: undefined,\n      step: {\n        type: OrderV1.StepType.DEPOSIT,\n        minimumLP: minimumLPReceived,\n      },\n      batcherFee: batcherFee,\n      depositADA: FIXED_DEPOSIT_ADA,\n    };\n    return await this.lucid\n      .newTx()\n      .payToContract(\n        DexV1Constant.ORDER_BASE_ADDRESS[this.networkId],\n        Data.to(OrderV1.Datum.toPlutusData(datum)),\n        orderAssets\n      )\n      .payToAddress(sender, reductionAssets)\n      .addSigner(sender)\n      .attachMetadata(674, { msg: [MetadataMessage.DEPOSIT_ORDER] })\n      .complete();\n  }\n\n  async buildCancelOrder(\n    options: BuildCancelOrderOptions\n  ): Promise<TxComplete> {\n    const { orderUtxo } = options;\n    const redeemer = Data.to(new Constr(OrderV1.Redeemer.CANCEL_ORDER, []));\n    const rawDatum = orderUtxo.datum;\n    invariant(\n      rawDatum,\n      `Cancel Order requires Order UTxOs along with its CBOR Datum`\n    );\n    const orderDatum = OrderV1.Datum.fromPlutusData(\n      this.networkId,\n      Data.from(rawDatum) as Constr<Data>\n    );\n    return await this.lucid\n      .newTx()\n      .collectFrom([orderUtxo], redeemer)\n      .addSigner(orderDatum.sender)\n      .attachSpendingValidator(<SpendingValidator>DexV1Constant.ORDER_SCRIPT)\n      .attachMetadata(674, { msg: [MetadataMessage.CANCEL_ORDER] })\n      .complete();\n  }\n}\n","import invariant from \"@minswap/tiny-invariant\";\nimport {\n  Address,\n  Assets,\n  Constr,\n  Credential,\n  Data,\n  Lucid,\n  OutRef,\n  Tx,\n  TxComplete,\n  UTxO,\n} from \"lucid-cardano\";\n\nimport {\n  Asset,\n  BlockfrostAdapter,\n  DexV2Calculation,\n  DexV2Constant,\n  FIXED_DEPOSIT_ADA,\n  MetadataMessage,\n  OrderV2,\n  PoolV2,\n} from \".\";\nimport { calculateBatcherFee } from \"./batcher-fee-reduction/calculate\";\nimport { DexVersion } from \"./batcher-fee-reduction/types.internal\";\nimport { FactoryV2 } from \"./types/factory\";\nimport { NetworkEnvironment, NetworkId } from \"./types/network\";\nimport { lucidToNetworkEnv } from \"./utils/network.internal\";\n\n/**\n * Options for building Pool V2 Creation transaction\n * @assetA\n * @assetB\n * @amountA\n * @amountB\n * @tradingFeeNumerator numerator of Pool's trading fee with denominator 10000\n *    Eg:\n *      - fee 0.05% -> tradingFeeNumerator 5\n *      - fee 0.3% -> tradingFeeNumerator 30\n *      - fee 1% -> tradingFeeNumerator 100\n */\nexport type CreatePoolV2Options = {\n  assetA: Asset;\n  assetB: Asset;\n  amountA: bigint;\n  amountB: bigint;\n  tradingFeeNumerator: bigint;\n};\n\nexport type BulkOrdersOption = {\n  sender: Address;\n  orderOptions: OrderOptions[];\n  expiredOptions?: OrderV2.ExpirySetting;\n  availableUtxos: UTxO[];\n  composeTx?: Tx;\n  authorizationMethodType?: OrderV2.AuthorizationMethodType;\n};\n\nexport type OrderV2SwapRouting = {\n  lpAsset: Asset;\n  direction: OrderV2.Direction;\n};\nexport type DepositOptions = {\n  type: OrderV2.StepType.DEPOSIT;\n  assetA: Asset;\n  assetB: Asset;\n  amountA: bigint;\n  amountB: bigint;\n  minimumLPReceived: bigint;\n  killOnFailed: boolean;\n};\n\nexport type WithdrawOptions = {\n  type: OrderV2.StepType.WITHDRAW;\n  lpAmount: bigint;\n  minimumAssetAReceived: bigint;\n  minimumAssetBReceived: bigint;\n  killOnFailed: boolean;\n};\n\nexport type SwapExactInOptions = {\n  type: OrderV2.StepType.SWAP_EXACT_IN;\n  assetIn: Asset;\n  amountIn: bigint;\n  minimumAmountOut: bigint;\n  direction: OrderV2.Direction;\n  killOnFailed: boolean;\n  isLimitOrder: boolean;\n};\n\nexport type SwapExactOutOptions = {\n  type: OrderV2.StepType.SWAP_EXACT_OUT;\n  assetIn: Asset;\n  maximumAmountIn: bigint;\n  expectedReceived: bigint;\n  direction: OrderV2.Direction;\n  killOnFailed: boolean;\n};\n\nexport type StopOptions = {\n  type: OrderV2.StepType.STOP;\n  assetIn: Asset;\n  amountIn: bigint;\n  stopAmount: bigint;\n  direction: OrderV2.Direction;\n};\n\nexport type OCOOptions = {\n  type: OrderV2.StepType.OCO;\n  assetIn: Asset;\n  amountIn: bigint;\n  limitAmount: bigint;\n  stopAmount: bigint;\n  direction: OrderV2.Direction;\n};\n\nexport type ZapOutOptions = {\n  type: OrderV2.StepType.ZAP_OUT;\n  lpAmount: bigint;\n  direction: OrderV2.Direction;\n  minimumReceived: bigint;\n  killOnFailed: boolean;\n};\n\nexport type PartialSwapOptions = {\n  type: OrderV2.StepType.PARTIAL_SWAP;\n  assetIn: Asset;\n  amountIn: bigint;\n  direction: OrderV2.Direction;\n  expectedInOutRatio: [bigint, bigint];\n  maximumSwapTime: number;\n  minimumSwapAmountRequired: bigint;\n};\n\nexport type WithdrawImbalanceOptions = {\n  type: OrderV2.StepType.WITHDRAW_IMBALANCE;\n  lpAmount: bigint;\n  ratioAssetA: bigint;\n  ratioAssetB: bigint;\n  minimumAssetA: bigint;\n  killOnFailed: boolean;\n};\n\nexport type MultiRoutingOptions = {\n  type: OrderV2.StepType.SWAP_ROUTING;\n  assetIn: Asset;\n  amountIn: bigint;\n  routings: OrderV2.Route[];\n  minimumReceived: bigint;\n};\n\nexport type OrderOptions = (\n  | DepositOptions\n  | WithdrawOptions\n  | SwapExactInOptions\n  | SwapExactOutOptions\n  | StopOptions\n  | OCOOptions\n  | ZapOutOptions\n  | PartialSwapOptions\n  | WithdrawImbalanceOptions\n  | MultiRoutingOptions\n) & {\n  lpAsset: Asset;\n};\n\nexport type CancelBulkOrdersOptions = {\n  orderOutRefs: OutRef[];\n  composeTx?: Tx;\n  AuthorizationMethodType?: OrderV2.AuthorizationMethodType;\n};\n\nexport class DexV2 {\n  private readonly lucid: Lucid;\n  private readonly networkId: NetworkId;\n  private readonly adapter: BlockfrostAdapter;\n  private readonly networkEnv: NetworkEnvironment;\n  private readonly dexVersion = DexVersion.DEX_V2;\n\n  constructor(lucid: Lucid, adapter: BlockfrostAdapter) {\n    this.lucid = lucid;\n    this.networkId =\n      lucid.network === \"Mainnet\" ? NetworkId.MAINNET : NetworkId.TESTNET;\n    this.adapter = adapter;\n    this.networkEnv = lucidToNetworkEnv(lucid.network);\n  }\n\n  async createPoolTx({\n    assetA,\n    assetB,\n    amountA,\n    amountB,\n    tradingFeeNumerator,\n  }: CreatePoolV2Options): Promise<TxComplete> {\n    const config = DexV2Constant.CONFIG[this.networkId];\n    // Sort ascendingly assets and its amount\n    const [sortedAssetA, sortedAssetB, sortedAmountA, sortedAmountB] =\n      Asset.compare(assetA, assetB) < 0\n        ? [assetA, assetB, amountA, amountB]\n        : [assetB, assetA, amountB, amountA];\n\n    const factory = await this.adapter.getFactoryV2ByPair(\n      sortedAssetA,\n      sortedAssetB\n    );\n    invariant(\n      factory,\n      `cannot find available Factory V2 Utxo, the liquidity pool might be created before`\n    );\n\n    const initialLiquidity = DexV2Calculation.calculateInitialLiquidity({\n      amountA: sortedAmountA,\n      amountB: sortedAmountB,\n    });\n    const remainingLiquidity =\n      PoolV2.MAX_LIQUIDITY - (initialLiquidity - PoolV2.MINIMUM_LIQUIDITY);\n    const lpAssetName = PoolV2.computeLPAssetName(sortedAssetA, sortedAssetB);\n    const lpAsset: Asset = {\n      policyId: config.lpPolicyId,\n      tokenName: lpAssetName,\n    };\n    const poolBatchingStakeCredential = this.lucid.utils.getAddressDetails(\n      config.poolBatchingAddress\n    )?.stakeCredential;\n    invariant(\n      poolBatchingStakeCredential,\n      `cannot parse Liquidity Pool batching address`\n    );\n    const poolDatum: PoolV2.Datum = {\n      poolBatchingStakeCredential: poolBatchingStakeCredential,\n      assetA: sortedAssetA,\n      assetB: sortedAssetB,\n      totalLiquidity: initialLiquidity,\n      reserveA: sortedAmountA,\n      reserveB: sortedAmountB,\n      baseFee: {\n        feeANumerator: tradingFeeNumerator,\n        feeBNumerator: tradingFeeNumerator,\n      },\n      feeSharingNumerator: undefined,\n      allowDynamicFee: false,\n    };\n\n    const poolValue: Assets = {\n      lovelace: PoolV2.DEFAULT_POOL_ADA,\n      [Asset.toString(lpAsset)]: remainingLiquidity,\n      [config.poolAuthenAsset]: 1n,\n    };\n    if (poolValue[Asset.toString(sortedAssetA)]) {\n      poolValue[Asset.toString(sortedAssetA)] += sortedAmountA;\n    } else {\n      poolValue[Asset.toString(sortedAssetA)] = sortedAmountA;\n    }\n    if (poolValue[Asset.toString(sortedAssetB)]) {\n      poolValue[Asset.toString(sortedAssetB)] += sortedAmountB;\n    } else {\n      poolValue[Asset.toString(sortedAssetB)] = sortedAmountB;\n    }\n\n    const deployedScripts = DexV2Constant.DEPLOYED_SCRIPTS[this.networkId];\n\n    const factoryRefs = await this.lucid.utxosByOutRef([\n      deployedScripts.factory,\n    ]);\n    invariant(\n      factoryRefs.length === 1,\n      \"cannot find deployed script for Factory Validator\"\n    );\n    const factoryRef = factoryRefs[0];\n    const authenRefs = await this.lucid.utxosByOutRef([deployedScripts.authen]);\n    invariant(\n      authenRefs.length === 1,\n      \"cannot find deployed script for Authen Minting Policy\"\n    );\n    const authenRef = authenRefs[0];\n    const factoryUtxos = await this.lucid.utxosByOutRef([\n      {\n        txHash: factory.txIn.txHash,\n        outputIndex: factory.txIn.index,\n      },\n    ]);\n    invariant(factoryUtxos.length === 1, \"cannot find Utxo of Factory\");\n    const factoryUtxo = factoryUtxos[0];\n\n    const factoryRedeemer: FactoryV2.Redeemer = {\n      assetA: sortedAssetA,\n      assetB: sortedAssetB,\n    };\n\n    const newFactoryDatum1: FactoryV2.Datum = {\n      head: factory.head,\n      tail: lpAssetName,\n    };\n    const newFactoryDatum2: FactoryV2.Datum = {\n      head: lpAssetName,\n      tail: factory.tail,\n    };\n\n    return this.lucid\n      .newTx()\n      .readFrom([factoryRef, authenRef])\n      .collectFrom(\n        [factoryUtxo],\n        Data.to(FactoryV2.Redeemer.toPlutusData(factoryRedeemer))\n      )\n      .payToContract(\n        config.poolCreationAddress,\n        {\n          inline: Data.to(PoolV2.Datum.toPlutusData(poolDatum)),\n        },\n        poolValue\n      )\n      .payToContract(\n        config.factoryAddress,\n        {\n          inline: Data.to(FactoryV2.Datum.toPlutusData(newFactoryDatum1)),\n        },\n        {\n          [config.factoryAsset]: 1n,\n        }\n      )\n      .payToContract(\n        config.factoryAddress,\n        {\n          inline: Data.to(FactoryV2.Datum.toPlutusData(newFactoryDatum2)),\n        },\n        {\n          [config.factoryAsset]: 1n,\n        }\n      )\n      .mintAssets(\n        {\n          [Asset.toString(lpAsset)]: PoolV2.MAX_LIQUIDITY,\n          [config.factoryAsset]: 1n,\n          [config.poolAuthenAsset]: 1n,\n        },\n        Data.to(new Constr(1, []))\n      )\n      .attachMetadata(674, { msg: [MetadataMessage.CREATE_POOL] })\n      .complete();\n  }\n\n  private buildOrderValue(options: OrderOptions): Record<string, bigint> {\n    const orderAssets: Assets = {};\n    switch (options.type) {\n      case OrderV2.StepType.DEPOSIT: {\n        const { assetA, assetB, amountA, amountB, minimumLPReceived } = options;\n        invariant(\n          amountA >= 0n && amountB >= 0n && amountA + amountB > 0n,\n          \"amount must be positive\"\n        );\n        invariant(\n          minimumLPReceived > 0n,\n          \"minimum LP received must be positive\"\n        );\n        orderAssets[Asset.toString(assetA)] = amountA;\n        orderAssets[Asset.toString(assetB)] = amountB;\n        break;\n      }\n      case OrderV2.StepType.WITHDRAW: {\n        const {\n          lpAsset,\n          lpAmount,\n          minimumAssetAReceived,\n          minimumAssetBReceived,\n        } = options;\n        invariant(lpAmount > 0n, \"LP amount must be positive\");\n        invariant(\n          minimumAssetAReceived > 0n && minimumAssetBReceived > 0n,\n          \"minimum asset received must be positive\"\n        );\n        orderAssets[Asset.toString(lpAsset)] = lpAmount;\n        break;\n      }\n      case OrderV2.StepType.SWAP_EXACT_IN: {\n        const { assetIn, amountIn, minimumAmountOut } = options;\n        invariant(amountIn > 0n, \"amount in must be positive\");\n        invariant(minimumAmountOut > 0n, \"minimum amount out must be positive\");\n        orderAssets[Asset.toString(assetIn)] = amountIn;\n        break;\n      }\n      case OrderV2.StepType.SWAP_EXACT_OUT: {\n        const { assetIn, maximumAmountIn, expectedReceived } = options;\n        invariant(maximumAmountIn > 0n, \"amount in must be positive\");\n        invariant(expectedReceived > 0n, \"minimum amount out must be positive\");\n        orderAssets[Asset.toString(assetIn)] = maximumAmountIn;\n        break;\n      }\n      case OrderV2.StepType.STOP: {\n        const { assetIn, amountIn, stopAmount } = options;\n        invariant(amountIn > 0n, \"amount in must be positive\");\n        invariant(stopAmount > 0n, \"stop amount out must be positive\");\n        orderAssets[Asset.toString(assetIn)] = amountIn;\n        break;\n      }\n      case OrderV2.StepType.OCO: {\n        const { assetIn, amountIn, stopAmount, limitAmount } = options;\n        invariant(amountIn > 0n, \"amount in must be positive\");\n        invariant(stopAmount > 0n, \"stop amount out must be positive\");\n        invariant(limitAmount > 0n, \"limit amount out must be positive\");\n        orderAssets[Asset.toString(assetIn)] = amountIn;\n        break;\n      }\n      case OrderV2.StepType.ZAP_OUT: {\n        const { lpAsset, lpAmount, minimumReceived } = options;\n        invariant(lpAmount > 0n, \"lp amount in must be positive\");\n        invariant(minimumReceived > 0n, \"minimum amount out must be positive\");\n        orderAssets[Asset.toString(lpAsset)] = lpAmount;\n        break;\n      }\n      case OrderV2.StepType.PARTIAL_SWAP: {\n        const { assetIn, amountIn, expectedInOutRatio } = options;\n        invariant(amountIn > 0n, \"amount in must be positive\");\n        const [expectedInOutRatioNumerator, expectedInOutRatioDenominator] =\n          expectedInOutRatio;\n        invariant(\n          expectedInOutRatioNumerator > 0n &&\n            expectedInOutRatioDenominator > 0n,\n          \"expected input and output ratio must be positive\"\n        );\n        orderAssets[Asset.toString(assetIn)] = amountIn;\n        break;\n      }\n      case OrderV2.StepType.WITHDRAW_IMBALANCE: {\n        const { lpAsset, lpAmount, ratioAssetA, ratioAssetB, minimumAssetA } =\n          options;\n        invariant(lpAmount > 0n, \"LP amount must be positive\");\n        invariant(\n          ratioAssetA > 0n && ratioAssetB > 0n && minimumAssetA > 0n,\n          \"minimum asset and ratio received must be positive\"\n        );\n        orderAssets[Asset.toString(lpAsset)] = lpAmount;\n        break;\n      }\n      case OrderV2.StepType.SWAP_ROUTING: {\n        const { assetIn, amountIn } = options;\n        invariant(amountIn > 0n, \"Amount must be positive\");\n        orderAssets[Asset.toString(assetIn)] = amountIn;\n        break;\n      }\n    }\n    if (\"lovelace\" in orderAssets) {\n      orderAssets[\"lovelace\"] += FIXED_DEPOSIT_ADA;\n    } else {\n      orderAssets[\"lovelace\"] = FIXED_DEPOSIT_ADA;\n    }\n    return orderAssets;\n  }\n\n  buildOrderStep(options: OrderOptions, finalBatcherFee: bigint): OrderV2.Step {\n    switch (options.type) {\n      case OrderV2.StepType.DEPOSIT: {\n        const { amountA, amountB, minimumLPReceived, killOnFailed } = options;\n        invariant(\n          amountA >= 0n && amountB >= 0n && amountA + amountB > 0n,\n          \"amount must be positive\"\n        );\n        invariant(\n          minimumLPReceived > 0n,\n          \"minimum LP received must be positive\"\n        );\n        const orderStep: OrderV2.Step = {\n          type: OrderV2.StepType.DEPOSIT,\n          depositAmount: {\n            type: OrderV2.AmountType.SPECIFIC_AMOUNT,\n            depositAmountA: amountA,\n            depositAmountB: amountB,\n          },\n          minimumLP: minimumLPReceived,\n          killable: killOnFailed\n            ? OrderV2.Killable.KILL_ON_FAILED\n            : OrderV2.Killable.PENDING_ON_FAILED,\n        };\n        return orderStep;\n      }\n      case OrderV2.StepType.WITHDRAW: {\n        const {\n          lpAmount,\n          minimumAssetAReceived,\n          minimumAssetBReceived,\n          killOnFailed,\n        } = options;\n        invariant(lpAmount > 0n, \"LP amount must be positive\");\n        invariant(\n          minimumAssetAReceived > 0n && minimumAssetBReceived > 0n,\n          \"minimum asset received must be positive\"\n        );\n        const orderStep: OrderV2.Step = {\n          type: OrderV2.StepType.WITHDRAW,\n          withdrawalAmount: {\n            type: OrderV2.AmountType.SPECIFIC_AMOUNT,\n            withdrawalLPAmount: lpAmount,\n          },\n          minimumAssetA: minimumAssetAReceived,\n          minimumAssetB: minimumAssetBReceived,\n          killable: killOnFailed\n            ? OrderV2.Killable.KILL_ON_FAILED\n            : OrderV2.Killable.PENDING_ON_FAILED,\n        };\n        return orderStep;\n      }\n      case OrderV2.StepType.SWAP_EXACT_IN: {\n        const { amountIn, direction, minimumAmountOut, killOnFailed } = options;\n        invariant(amountIn > 0n, \"amount in must be positive\");\n        invariant(minimumAmountOut > 0n, \"minimum amount out must be positive\");\n        const orderStep: OrderV2.Step = {\n          type: OrderV2.StepType.SWAP_EXACT_IN,\n          direction: direction,\n          swapAmount: {\n            type: OrderV2.AmountType.SPECIFIC_AMOUNT,\n            swapAmount: amountIn,\n          },\n          minimumReceived: minimumAmountOut,\n          killable: killOnFailed\n            ? OrderV2.Killable.KILL_ON_FAILED\n            : OrderV2.Killable.PENDING_ON_FAILED,\n        };\n        return orderStep;\n      }\n      case OrderV2.StepType.SWAP_EXACT_OUT: {\n        const { maximumAmountIn, expectedReceived, direction, killOnFailed } =\n          options;\n        invariant(maximumAmountIn > 0n, \"amount in must be positive\");\n        invariant(expectedReceived > 0n, \"minimum amount out must be positive\");\n        const orderStep: OrderV2.Step = {\n          type: OrderV2.StepType.SWAP_EXACT_OUT,\n          direction: direction,\n          maximumSwapAmount: {\n            type: OrderV2.AmountType.SPECIFIC_AMOUNT,\n            swapAmount: maximumAmountIn,\n          },\n          expectedReceived: expectedReceived,\n          killable: killOnFailed\n            ? OrderV2.Killable.KILL_ON_FAILED\n            : OrderV2.Killable.PENDING_ON_FAILED,\n        };\n        return orderStep;\n      }\n      case OrderV2.StepType.STOP: {\n        const { amountIn, direction, stopAmount } = options;\n        invariant(amountIn > 0n, \"amount in must be positive\");\n        invariant(stopAmount > 0n, \"stop amount out must be positive\");\n        const orderStep: OrderV2.Step = {\n          type: OrderV2.StepType.STOP,\n          direction: direction,\n          swapAmount: {\n            type: OrderV2.AmountType.SPECIFIC_AMOUNT,\n            swapAmount: amountIn,\n          },\n          stopReceived: stopAmount,\n        };\n        return orderStep;\n      }\n      case OrderV2.StepType.OCO: {\n        const { amountIn, direction, stopAmount, limitAmount } = options;\n        invariant(amountIn > 0n, \"amount in must be positive\");\n        invariant(stopAmount > 0n, \"stop amount out must be positive\");\n        invariant(limitAmount > 0n, \"limit amount out must be positive\");\n        const orderStep: OrderV2.Step = {\n          type: OrderV2.StepType.OCO,\n          direction: direction,\n          swapAmount: {\n            type: OrderV2.AmountType.SPECIFIC_AMOUNT,\n            swapAmount: amountIn,\n          },\n          stopReceived: stopAmount,\n          minimumReceived: limitAmount,\n        };\n        return orderStep;\n      }\n      case OrderV2.StepType.ZAP_OUT: {\n        const { lpAmount, minimumReceived, direction, killOnFailed } = options;\n        invariant(lpAmount > 0n, \"lp amount in must be positive\");\n        invariant(minimumReceived > 0n, \"minimum amount out must be positive\");\n        const orderStep: OrderV2.Step = {\n          type: OrderV2.StepType.ZAP_OUT,\n          direction: direction,\n          withdrawalAmount: {\n            type: OrderV2.AmountType.SPECIFIC_AMOUNT,\n            withdrawalLPAmount: lpAmount,\n          },\n          minimumReceived: minimumReceived,\n          killable: killOnFailed\n            ? OrderV2.Killable.KILL_ON_FAILED\n            : OrderV2.Killable.PENDING_ON_FAILED,\n        };\n        return orderStep;\n      }\n      case OrderV2.StepType.PARTIAL_SWAP: {\n        const {\n          amountIn,\n          direction,\n          expectedInOutRatio,\n          maximumSwapTime,\n          minimumSwapAmountRequired,\n        } = options;\n        invariant(amountIn > 0n, \"amount in must be positive\");\n        const [expectedInOutRatioNumerator, expectedInOutRatioDenominator] =\n          expectedInOutRatio;\n        invariant(\n          expectedInOutRatioNumerator > 0n &&\n            expectedInOutRatioDenominator > 0n,\n          \"expected input and output ratio must be positive\"\n        );\n        const orderStep: OrderV2.Step = {\n          type: OrderV2.StepType.PARTIAL_SWAP,\n          direction: direction,\n          totalSwapAmount: amountIn,\n          ioRatioNumerator: expectedInOutRatioNumerator,\n          ioRatioDenominator: expectedInOutRatioDenominator,\n          hops: BigInt(maximumSwapTime),\n          minimumSwapAmountRequired: minimumSwapAmountRequired,\n          maxBatcherFeeEachTime: finalBatcherFee,\n        };\n        return orderStep;\n      }\n      case OrderV2.StepType.WITHDRAW_IMBALANCE: {\n        const {\n          lpAmount,\n          ratioAssetA,\n          ratioAssetB,\n          minimumAssetA,\n          killOnFailed,\n        } = options;\n        invariant(lpAmount > 0n, \"LP amount must be positive\");\n        invariant(\n          ratioAssetA > 0n && ratioAssetB > 0n && minimumAssetA > 0n,\n          \"minimum asset and ratio received must be positive\"\n        );\n        const orderStep: OrderV2.Step = {\n          type: OrderV2.StepType.WITHDRAW_IMBALANCE,\n          withdrawalAmount: {\n            type: OrderV2.AmountType.SPECIFIC_AMOUNT,\n            withdrawalLPAmount: lpAmount,\n          },\n          ratioAssetA: ratioAssetA,\n          ratioAssetB: ratioAssetB,\n          minimumAssetA: minimumAssetA,\n          killable: killOnFailed\n            ? OrderV2.Killable.KILL_ON_FAILED\n            : OrderV2.Killable.PENDING_ON_FAILED,\n        };\n        return orderStep;\n      }\n      case OrderV2.StepType.SWAP_ROUTING: {\n        const { amountIn, routings, minimumReceived } = options;\n        invariant(amountIn > 0n, \"Amount must be positive\");\n        const orderStep: OrderV2.Step = {\n          type: OrderV2.StepType.SWAP_ROUTING,\n          routings: routings,\n          swapAmount: {\n            type: OrderV2.AmountType.SPECIFIC_AMOUNT,\n            swapAmount: amountIn,\n          },\n          minimumReceived: minimumReceived,\n        };\n        return orderStep;\n      }\n    }\n  }\n\n  private buildOrderAddress(senderAddressStakeCred: Credential): string {\n    const orderAddress =\n      DexV2Constant.CONFIG[this.networkId].orderEnterpriseAddress;\n    const orderAddressPaymentCred =\n      this.lucid.utils.getAddressDetails(orderAddress).paymentCredential;\n    invariant(\n      orderAddressPaymentCred,\n      \"order address payment credentials not found\"\n    );\n    return this.lucid.utils.credentialToAddress(\n      orderAddressPaymentCred,\n      senderAddressStakeCred\n    );\n  }\n\n  private getOrderScriptHash(): string | undefined {\n    const orderAddress =\n      DexV2Constant.CONFIG[this.networkId].orderEnterpriseAddress;\n    const addrDetails = this.lucid.utils.getAddressDetails(orderAddress);\n    invariant(\n      addrDetails.paymentCredential?.type === \"Script\",\n      \"order address should be a script address\"\n    );\n    return addrDetails.paymentCredential.hash;\n  }\n\n  private getOrderMetadata(orderOption: OrderOptions): string {\n    switch (orderOption.type) {\n      case OrderV2.StepType.SWAP_EXACT_IN: {\n        if (orderOption.isLimitOrder) {\n          return MetadataMessage.SWAP_EXACT_IN_LIMIT_ORDER;\n        } else {\n          return MetadataMessage.SWAP_EXACT_IN_ORDER;\n        }\n      }\n      case OrderV2.StepType.STOP: {\n        return MetadataMessage.STOP_ORDER;\n      }\n      case OrderV2.StepType.OCO: {\n        return MetadataMessage.OCO_ORDER;\n      }\n      case OrderV2.StepType.SWAP_EXACT_OUT: {\n        return MetadataMessage.SWAP_EXACT_OUT_ORDER;\n      }\n      case OrderV2.StepType.DEPOSIT: {\n        const isZapIn =\n          orderOption.amountA === 0n || orderOption.amountB === 0n;\n        if (isZapIn) {\n          return MetadataMessage.ZAP_IN_ORDER;\n        } else {\n          return MetadataMessage.DEPOSIT_ORDER;\n        }\n      }\n      case OrderV2.StepType.WITHDRAW: {\n        return MetadataMessage.WITHDRAW_ORDER;\n      }\n      case OrderV2.StepType.ZAP_OUT: {\n        return MetadataMessage.ZAP_OUT_ORDER;\n      }\n      case OrderV2.StepType.PARTIAL_SWAP: {\n        return MetadataMessage.PARTIAL_SWAP_ORDER;\n      }\n      case OrderV2.StepType.WITHDRAW_IMBALANCE: {\n        return MetadataMessage.WITHDRAW_ORDER;\n      }\n      case OrderV2.StepType.SWAP_ROUTING: {\n        return MetadataMessage.ROUTING_ORDER;\n      }\n    }\n  }\n\n  async createBulkOrdersTx({\n    sender,\n    orderOptions,\n    expiredOptions,\n    availableUtxos,\n    composeTx,\n    authorizationMethodType,\n  }: BulkOrdersOption): Promise<TxComplete> {\n    // calculate total order value\n    const totalOrderAssets: Record<string, bigint> = {};\n    for (const option of orderOptions) {\n      const orderAssets = this.buildOrderValue(option);\n      for (const [asset, amt] of Object.entries(orderAssets)) {\n        if (asset in totalOrderAssets) {\n          totalOrderAssets[asset] += amt;\n        } else {\n          totalOrderAssets[asset] = amt;\n        }\n      }\n    }\n    // calculate batcher fee\n    const { batcherFee, reductionAssets } = calculateBatcherFee({\n      utxos: availableUtxos,\n      orderAssets: totalOrderAssets,\n      networkEnv: this.networkEnv,\n      dexVersion: this.dexVersion,\n    });\n    const limitOrders: string[] = [];\n    const lucidTx = this.lucid.newTx();\n    for (let i = 0; i < orderOptions.length; i++) {\n      const option = orderOptions[i];\n      const { type, lpAsset } = option;\n      const orderAssets = this.buildOrderValue(option);\n      const orderStep = this.buildOrderStep(option, batcherFee);\n      if (type === OrderV2.StepType.SWAP_EXACT_IN && option.isLimitOrder) {\n        limitOrders.push(i.toString());\n      }\n      let totalBatcherFee: bigint;\n      if (type === OrderV2.StepType.PARTIAL_SWAP) {\n        totalBatcherFee = batcherFee * BigInt(option.maximumSwapTime);\n      } else {\n        totalBatcherFee = batcherFee;\n      }\n      if (\"lovelace\" in orderAssets) {\n        orderAssets[\"lovelace\"] += totalBatcherFee;\n      } else {\n        orderAssets[\"lovelace\"] = totalBatcherFee;\n      }\n\n      const senderPaymentCred =\n        this.lucid.utils.getAddressDetails(sender).paymentCredential;\n      invariant(\n        senderPaymentCred,\n        \"sender address payment credentials not found\"\n      );\n\n      const canceller = authorizationMethodType\n        ? {\n            type: authorizationMethodType,\n            hash: senderPaymentCred.hash,\n          }\n        : {\n            type: OrderV2.AuthorizationMethodType.SIGNATURE,\n            hash: senderPaymentCred.hash,\n          };\n      const orderDatum: OrderV2.Datum = {\n        canceller: canceller,\n        refundReceiver: sender,\n        refundReceiverDatum: {\n          type: OrderV2.ExtraDatumType.NO_DATUM,\n        },\n        successReceiver: sender,\n        successReceiverDatum: {\n          type: OrderV2.ExtraDatumType.NO_DATUM,\n        },\n        step: orderStep,\n        lpAsset: lpAsset,\n        maxBatcherFee: totalBatcherFee,\n        expiredOptions: expiredOptions,\n      };\n      let orderAddress: string;\n      try {\n        const senderStakeAddress = this.lucid.utils.stakeCredentialOf(sender);\n        orderAddress = this.buildOrderAddress(senderStakeAddress);\n      } catch (e) {\n        // if fails then sender address doesn't have stake credentials\n        orderAddress =\n          DexV2Constant.CONFIG[this.networkId].orderEnterpriseAddress;\n      }\n      lucidTx.payToContract(\n        orderAddress,\n        {\n          inline: Data.to(OrderV2.Datum.toPlutusData(orderDatum)),\n        },\n        orderAssets\n      );\n    }\n\n    const metadata =\n      orderOptions.length > 1\n        ? MetadataMessage.MIXED_ORDERS\n        : this.getOrderMetadata(orderOptions[0]);\n\n    const limitOrderMessage = limitOrders.length > 0 ? limitOrders : undefined;\n    lucidTx.attachMetadata(674, {\n      msg: [metadata],\n      limitOrders: limitOrderMessage,\n    });\n    lucidTx.payToAddress(sender, reductionAssets);\n    if (composeTx) {\n      lucidTx.compose(composeTx);\n    }\n    return lucidTx.complete();\n  }\n\n  async cancelOrder({\n    orderOutRefs,\n    composeTx,\n  }: CancelBulkOrdersOptions): Promise<TxComplete> {\n    const v2OrderScriptHash = this.getOrderScriptHash();\n    const orderUtxos = await this.lucid.utxosByOutRef(orderOutRefs);\n    if (orderUtxos.length === 0) {\n      throw new Error(\"Order Utxos are empty\");\n    }\n    const requiredPubKeyHashSet = new Set<string>();\n    const orderRefs = await this.lucid.utxosByOutRef([\n      DexV2Constant.DEPLOYED_SCRIPTS[this.networkId].order,\n    ]);\n    invariant(\n      orderRefs.length === 1,\n      \"cannot find deployed script for V2 Order\"\n    );\n\n    const orderRef = orderRefs[0];\n    const lucidTx = this.lucid.newTx().readFrom([orderRef]);\n    for (const utxo of orderUtxos) {\n      const orderAddr = utxo.address;\n      const orderScriptPaymentCred =\n        this.lucid.utils.getAddressDetails(orderAddr).paymentCredential;\n      invariant(\n        orderScriptPaymentCred?.type === \"Script\" &&\n          orderScriptPaymentCred.hash === v2OrderScriptHash,\n        `Utxo is not belonged Minswap's order address, utxo: ${utxo.txHash}`\n      );\n      let datum: OrderV2.Datum;\n      if (utxo.datum) {\n        const rawDatum = utxo.datum;\n        datum = OrderV2.Datum.fromPlutusData(\n          this.networkId,\n          Data.from(rawDatum) as Constr<Data>\n        );\n      } else if (utxo.datumHash) {\n        const rawDatum = await this.lucid.datumOf(utxo);\n        datum = OrderV2.Datum.fromPlutusData(\n          this.networkId,\n          rawDatum as Constr<Data>\n        );\n      } else {\n        throw new Error(\n          \"Utxo without Datum Hash or Inline Datum can not be spent\"\n        );\n      }\n\n      if (datum.canceller.type === OrderV2.AuthorizationMethodType.SIGNATURE)\n        requiredPubKeyHashSet.add(datum.canceller.hash);\n    }\n    const redeemer = Data.to(\n      new Constr(OrderV2.Redeemer.CANCEL_ORDER_BY_OWNER, [])\n    );\n    lucidTx.collectFrom(orderUtxos, redeemer);\n\n    for (const hash of requiredPubKeyHashSet.keys()) {\n      lucidTx.addSignerKey(hash);\n    }\n    lucidTx.attachMetadata(674, {\n      msg: [MetadataMessage.CANCEL_ORDER],\n    });\n    if (composeTx) {\n      lucidTx.compose(composeTx);\n    }\n    return lucidTx.complete();\n  }\n}\n"],"names":[],"mappings":"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"}